"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.providerStateReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var providerStateUpdaters = _interopRequireWildcard(require("./provider-state-updaters"));

var _providerActions = require("../actions/provider-actions");

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.EXPORT_FILE_TO_CLOUD, providerStateUpdaters.exportFileToCloudUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.EXPORT_FILE_SUCCESS, providerStateUpdaters.exportFileSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.EXPORT_FILE_ERROR, providerStateUpdaters.exportFileErrorUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.RESET_PROVIDER_STATUS, providerStateUpdaters.resetProviderStatusUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.SET_CLOUD_PROVIDER, providerStateUpdaters.setCloudProviderUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.POST_SAVE_LOAD_SUCCESS, providerStateUpdaters.postSaveLoadSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.LOAD_CLOUD_MAP, providerStateUpdaters.loadCloudMapUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.LOAD_CLOUD_MAP_SUCCESS, providerStateUpdaters.loadCloudMapSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.LOAD_CLOUD_MAP_ERROR, providerStateUpdaters.loadCloudMapErrorUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.GET_SAVED_MAPS, providerStateUpdaters.getSavedMapsUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.GET_SAVED_MAPS_SUCCESS, providerStateUpdaters.getSavedMapsSuccessUpdater), (0, _defineProperty2["default"])(_actionHandler, _providerActions.ActionTypes.GET_SAVED_MAPS_ERROR, providerStateUpdaters.getSavedMapsErrorUpdater), _actionHandler); // construct provider-state reducer

var providerStateReducerFactory = function providerStateReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (// @ts-ignore
    (0, _reduxActions.handleActions)(actionHandler, _objectSpread(_objectSpread(_objectSpread({}, providerStateUpdaters.INITIAL_PROVIDER_STATE), initialState), {}, {
      initialState: initialState
    }))
  );
};

exports.providerStateReducerFactory = providerStateReducerFactory;

var _default = providerStateReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9wcm92aWRlci1zdGF0ZS5qcyJdLCJuYW1lcyI6WyJhY3Rpb25IYW5kbGVyIiwiQWN0aW9uVHlwZXMiLCJFWFBPUlRfRklMRV9UT19DTE9VRCIsInByb3ZpZGVyU3RhdGVVcGRhdGVycyIsImV4cG9ydEZpbGVUb0Nsb3VkVXBkYXRlciIsIkVYUE9SVF9GSUxFX1NVQ0NFU1MiLCJleHBvcnRGaWxlU3VjY2Vzc1VwZGF0ZXIiLCJFWFBPUlRfRklMRV9FUlJPUiIsImV4cG9ydEZpbGVFcnJvclVwZGF0ZXIiLCJSRVNFVF9QUk9WSURFUl9TVEFUVVMiLCJyZXNldFByb3ZpZGVyU3RhdHVzVXBkYXRlciIsIlNFVF9DTE9VRF9QUk9WSURFUiIsInNldENsb3VkUHJvdmlkZXJVcGRhdGVyIiwiUE9TVF9TQVZFX0xPQURfU1VDQ0VTUyIsInBvc3RTYXZlTG9hZFN1Y2Nlc3NVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVAiLCJsb2FkQ2xvdWRNYXBVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVBfU1VDQ0VTUyIsImxvYWRDbG91ZE1hcFN1Y2Nlc3NVcGRhdGVyIiwiTE9BRF9DTE9VRF9NQVBfRVJST1IiLCJsb2FkQ2xvdWRNYXBFcnJvclVwZGF0ZXIiLCJHRVRfU0FWRURfTUFQUyIsImdldFNhdmVkTWFwc1VwZGF0ZXIiLCJHRVRfU0FWRURfTUFQU19TVUNDRVNTIiwiZ2V0U2F2ZWRNYXBzU3VjY2Vzc1VwZGF0ZXIiLCJHRVRfU0FWRURfTUFQU19FUlJPUiIsImdldFNhdmVkTWFwc0Vycm9yVXBkYXRlciIsInByb3ZpZGVyU3RhdGVSZWR1Y2VyRmFjdG9yeSIsImluaXRpYWxTdGF0ZSIsIklOSVRJQUxfUFJPVklERVJfU1RBVEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxhQUFhLDBFQUNoQkMsNkJBQVlDLG9CQURJLEVBQ21CQyxxQkFBcUIsQ0FBQ0Msd0JBRHpDLG9EQUVoQkgsNkJBQVlJLG1CQUZJLEVBRWtCRixxQkFBcUIsQ0FBQ0csd0JBRnhDLG9EQUdoQkwsNkJBQVlNLGlCQUhJLEVBR2dCSixxQkFBcUIsQ0FBQ0ssc0JBSHRDLG9EQUloQlAsNkJBQVlRLHFCQUpJLEVBSW9CTixxQkFBcUIsQ0FBQ08sMEJBSjFDLG9EQUtoQlQsNkJBQVlVLGtCQUxJLEVBS2lCUixxQkFBcUIsQ0FBQ1MsdUJBTHZDLG9EQU1oQlgsNkJBQVlZLHNCQU5JLEVBTXFCVixxQkFBcUIsQ0FBQ1csMEJBTjNDLG9EQU9oQmIsNkJBQVljLGNBUEksRUFPYVoscUJBQXFCLENBQUNhLG1CQVBuQyxvREFRaEJmLDZCQUFZZ0Isc0JBUkksRUFRcUJkLHFCQUFxQixDQUFDZSwwQkFSM0Msb0RBU2hCakIsNkJBQVlrQixvQkFUSSxFQVNtQmhCLHFCQUFxQixDQUFDaUIsd0JBVHpDLG9EQVVoQm5CLDZCQUFZb0IsY0FWSSxFQVVhbEIscUJBQXFCLENBQUNtQixtQkFWbkMsb0RBV2hCckIsNkJBQVlzQixzQkFYSSxFQVdxQnBCLHFCQUFxQixDQUFDcUIsMEJBWDNDLG9EQVloQnZCLDZCQUFZd0Isb0JBWkksRUFZbUJ0QixxQkFBcUIsQ0FBQ3VCLHdCQVp6QyxrQkFBbkIsQyxDQWVBOztBQUNPLElBQU1DLDJCQUEyQixHQUFHLFNBQTlCQSwyQkFBOEI7QUFBQSxNQUFDQyxZQUFELHVFQUFnQixFQUFoQjtBQUFBLFNBQ3pDO0FBQ0EscUNBQWM1QixhQUFkLGdEQUNLRyxxQkFBcUIsQ0FBQzBCLHNCQUQzQixHQUVLRCxZQUZMO0FBR0VBLE1BQUFBLFlBQVksRUFBWkE7QUFIRjtBQUZ5QztBQUFBLENBQXBDOzs7O2VBUVFELDJCQUEyQixFIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtoYW5kbGVBY3Rpb25zfSBmcm9tICdyZWR1eC1hY3Rpb25zJztcbmltcG9ydCAqIGFzIHByb3ZpZGVyU3RhdGVVcGRhdGVycyBmcm9tICcuL3Byb3ZpZGVyLXN0YXRlLXVwZGF0ZXJzJztcbmltcG9ydCB7QWN0aW9uVHlwZXN9IGZyb20gJ2FjdGlvbnMvcHJvdmlkZXItYWN0aW9ucyc7XG5cbi8qKlxuICogSW1wb3J0YW50OiBEbyBub3QgcmVuYW1lIGBhY3Rpb25IYW5kbGVyYCBvciB0aGUgYXNzaWdubWVudCBwYXR0ZXJuIG9mIHByb3BlcnR5IHZhbHVlLlxuICogSXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uXG4gKi9cbmNvbnN0IGFjdGlvbkhhbmRsZXIgPSB7XG4gIFtBY3Rpb25UeXBlcy5FWFBPUlRfRklMRV9UT19DTE9VRF06IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5leHBvcnRGaWxlVG9DbG91ZFVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5FWFBPUlRfRklMRV9TVUNDRVNTXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmV4cG9ydEZpbGVTdWNjZXNzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkVYUE9SVF9GSUxFX0VSUk9SXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmV4cG9ydEZpbGVFcnJvclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRVNFVF9QUk9WSURFUl9TVEFUVVNdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMucmVzZXRQcm92aWRlclN0YXR1c1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5TRVRfQ0xPVURfUFJPVklERVJdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMuc2V0Q2xvdWRQcm92aWRlclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5QT1NUX1NBVkVfTE9BRF9TVUNDRVNTXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLnBvc3RTYXZlTG9hZFN1Y2Nlc3NVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTE9BRF9DTE9VRF9NQVBdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMubG9hZENsb3VkTWFwVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfQ0xPVURfTUFQX1NVQ0NFU1NdOiBwcm92aWRlclN0YXRlVXBkYXRlcnMubG9hZENsb3VkTWFwU3VjY2Vzc1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX0NMT1VEX01BUF9FUlJPUl06IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5sb2FkQ2xvdWRNYXBFcnJvclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5HRVRfU0FWRURfTUFQU106IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5nZXRTYXZlZE1hcHNVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuR0VUX1NBVkVEX01BUFNfU1VDQ0VTU106IHByb3ZpZGVyU3RhdGVVcGRhdGVycy5nZXRTYXZlZE1hcHNTdWNjZXNzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkdFVF9TQVZFRF9NQVBTX0VSUk9SXTogcHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLmdldFNhdmVkTWFwc0Vycm9yVXBkYXRlclxufTtcblxuLy8gY29uc3RydWN0IHByb3ZpZGVyLXN0YXRlIHJlZHVjZXJcbmV4cG9ydCBjb25zdCBwcm92aWRlclN0YXRlUmVkdWNlckZhY3RvcnkgPSAoaW5pdGlhbFN0YXRlID0ge30pID0+XG4gIC8vIEB0cy1pZ25vcmVcbiAgaGFuZGxlQWN0aW9ucyhhY3Rpb25IYW5kbGVyLCB7XG4gICAgLi4ucHJvdmlkZXJTdGF0ZVVwZGF0ZXJzLklOSVRJQUxfUFJPVklERVJfU1RBVEUsXG4gICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgIGluaXRpYWxTdGF0ZVxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgcHJvdmlkZXJTdGF0ZVJlZHVjZXJGYWN0b3J5KCk7XG4iXX0=