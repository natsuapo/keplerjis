"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProcessorDataId = updateProcessorDataId;
exports.getDefaultProcessor = getDefaultProcessor;
exports.execute_processor = execute_processor;
exports.execute_processor_tasks = execute_processor_tasks;
exports.batch_processing_task = batch_processing_task;
exports.add_dataset_columns = add_dataset_columns;
exports.update_dataset_column = update_dataset_column;
exports.PROCESSOR_UPDATER_PROPS = exports.PROCESS_TASK_FUNCS = exports.PROCESS_NEW_COLS = exports.PROCESS_MULTIDATA_FUNCS = exports.PROCESS_FUNCS = exports.PROCESSOR_ID_LENGTH = exports.DEFAULT_EXPORT_PROCESSOR_STRUCTURE = exports.DEFAULT_SPATIAL_PROCESSOR_STRUCTURE = exports.DEFAULT_TEMPORAL_PROCESSOR_STRUCTURE = exports.DEFAULT_GMT_PROCESSOR_STRUCTURE = exports.DEFAULT_PROCESSOR_STRUCTURE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _keymirror = _interopRequireDefault(require("keymirror"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _spatialProcessorUtils = require("./processor-utils/spatial-processor-utils");

var _googleapiProcessorUtils = require("./processor-utils/googleapi-processor-utils");

var _numericalProcessorUtils = require("./processor-utils/numerical-processor-utils");

var _generalProcessorUtils = require("./processor-utils/general-processor-utils");

var _datasetExtensionUtils = require("./dataset-extension-utils");

var _temporalProcessorUtils = require("./processor-utils/temporal-processor-utils");

var _lodash = _interopRequireDefault(require("lodash"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

//if processor will have output?
//id is not used in processor:
var DEFAULT_PROCESSOR_STRUCTURE = {
  dataId: [],
  // [string]
  // field specific
  name: null,
  // string
  type: null,
  fieldIdx: [],
  // [integer]
  domain: null,
  value: null,
  taskflag: false,
  attrs: {},
  join: {},
  batch: {
    oddataID: null,
    gpsdataID: null,
    poidataID: null,
    spatialFilter: null,
    temporalFilter: null,
    apikey: null,
    dbChecked: false,
    exportSetting: {
      outData: [],
      outColumns: ['datetime', 'gps', 'address', 'transportation mode', 'poi type'],
      header: true
    }
  }
};
exports.DEFAULT_PROCESSOR_STRUCTURE = DEFAULT_PROCESSOR_STRUCTURE;
var DEFAULT_GMT_PROCESSOR_STRUCTURE = {
  oddataID: null,
  gpsdataID: null,
  spatialFilter: null,
  temporalFilter: null,
  apikey: null //export filter: filtered origin data; merged poi data;

};
exports.DEFAULT_GMT_PROCESSOR_STRUCTURE = DEFAULT_GMT_PROCESSOR_STRUCTURE;
var DEFAULT_TEMPORAL_PROCESSOR_STRUCTURE = {
  dow: null,
  dateRange: [],
  removeHoliday: false,
  startTime: '07:00:00',
  endTime: '23:00:00',
  floor: 5
};
exports.DEFAULT_TEMPORAL_PROCESSOR_STRUCTURE = DEFAULT_TEMPORAL_PROCESSOR_STRUCTURE;
var DEFAULT_SPATIAL_PROCESSOR_STRUCTURE = {
  level: '大字・町',
  coordsModify: true,
  //if poiType true
  poiType: true,
  geometryFilter: null
};
exports.DEFAULT_SPATIAL_PROCESSOR_STRUCTURE = DEFAULT_SPATIAL_PROCESSOR_STRUCTURE;
var DEFAULT_EXPORT_PROCESSOR_STRUCTURE = {
  outData: ['OD data', 'GPS data', 'POI data'],
  outColumns: ['datetime', 'gps', 'address', 'transportation mode', 'poi type'],
  header: true
};
exports.DEFAULT_EXPORT_PROCESSOR_STRUCTURE = DEFAULT_EXPORT_PROCESSOR_STRUCTURE;
var PROCESSOR_ID_LENGTH = 4;
exports.PROCESSOR_ID_LENGTH = PROCESSOR_ID_LENGTH;

function updateProcessorDataId(dataId) {
  return getDefaultProcessor(dataId);
}

function getDefaultProcessor(dataId) {
  return _objectSpread(_objectSpread({}, DEFAULT_PROCESSOR_STRUCTURE), {}, {
    // store it as dataId and it could be one or many
    dataId: (0, _utils.toArray)(dataId),
    id: (0, _utils.generateHashId)(PROCESSOR_ID_LENGTH),
    field: null
  });
} // export function getProcessorFunction(method_name){
//
// }


var PROCESS_FUNCS = {
  //geoprocess
  CENTROID_EXTRACTION: _spatialProcessorUtils.centroid_extraction,
  MESHCODE_GENERALIZATION: _spatialProcessorUtils.meshcode_generalization,
  MESHCODE_AGGREGATION: _spatialProcessorUtils.meshcode_aggregation,
  MESHCODE_GENERATION: _spatialProcessorUtils.meshcode_generation,
  WKB_GENERATION: _spatialProcessorUtils.wkb_generation,
  //float process
  DIGIT_SLICING: _numericalProcessorUtils.digit_slicing,
  //filtering will generate new datasets or modify the original datasets;
  //time process:
  TIME_FLOORING: _temporalProcessorUtils.time_flooring //time indexing will change
  // TIME_INDEXING:time_indexing;

};
exports.PROCESS_FUNCS = PROCESS_FUNCS;
var PROCESS_MULTIDATA_FUNCS = {
  TABLE_JOIN: _datasetExtensionUtils.dataset_joining,
  SPATIAL_MASKING: _spatialProcessorUtils.spatial_masking,
  TIME_OD_JOIN: _datasetExtensionUtils.range_joining
};
exports.PROCESS_MULTIDATA_FUNCS = PROCESS_MULTIDATA_FUNCS;
var PROCESS_NEW_COLS = {
  CENTROID_EXTRACTION: 'centroid',
  MESHCODE_GENERALIZATION: 'meshcode',
  WKB_GENERATION: 'wkb',
  GOOGLE_API_QUERY: 'address',
  GEOCODING: ['lat', 'lng'],
  TYPE_CONVERSION: 'poi_type',
  REVERSE_GEOCODING: 'new_address'
}; //current state might be not enough? tbd

exports.PROCESS_NEW_COLS = PROCESS_NEW_COLS;
var PROCESS_TASK_FUNCS = {
  //google process:
  GOOGLE_API_QUERY: _googleapiProcessorUtils.server_place_id_query,
  GEOCODING: _googleapiProcessorUtils.geocoding_api_query,
  TYPE_CONVERSION: _googleapiProcessorUtils.server_poi_type_query
}; //dataset processor: here it is necessary to process the file:

exports.PROCESS_TASK_FUNCS = PROCESS_TASK_FUNCS;

function execute_processor(datasets, processor) {
  // return execute_processor()
  console.log('run execute processor');
  var method = processor.method,
      category = processor.category,
      dataId = processor.dataId,
      id = processor.id,
      name = processor.name,
      attrs = processor.attrs;
  attrs.col = name.id;

  if (name.type === 'geojson') {
    attrs.geom_col = name.id;
  }

  if (name.type === 'point') {
    // attrs.geom_col =
    attrs.col = name.pair;
    attrs.geom_col = name.pair;
  } //here is the functions that includes two datasets


  if (/[Mm]ask|[Jj]oin/.test(method)) {
    var PROCESS_ID = Object.keys(_defaultSettings.PROCESS_ITEMS).find(function (key) {
      return _defaultSettings.PROCESS_ITEMS[key] === method;
    });
    var new_datasets = (0, _generalProcessorUtils.datasets_interaction_process)(datasets, attrs, dataId, PROCESS_MULTIDATA_FUNCS[PROCESS_ID], 'merged');
    return {
      dataset: new_datasets,
      flag: 0
    };
  } else {
    var dataset = datasets[dataId[0]];

    if (dataset === undefined) {
      return {
        dataset: dataset,
        flag: -1
      };
    } else {
      try {
        var _PROCESS_ID = Object.keys(_defaultSettings.PROCESS_ITEMS).find(function (key) {
          return _defaultSettings.PROCESS_ITEMS[key] === method;
        });

        var process_func = PROCESS_FUNCS[_PROCESS_ID];

        if (process_func === undefined && PROCESS_TASK_FUNCS[_PROCESS_ID]) {
          return {
            dataset: dataset,
            flag: 2
          };
        }

        var new_dataset = process_func(dataset, attrs);
        return {
          dataset: new_dataset,
          flag: 1
        };
      } catch (e) {
        console.log(e);
        return {
          dataset: dataset,
          flag: -2
        };
      }
    }
  }
}

var PROCESSOR_UPDATER_PROPS = (0, _keymirror["default"])({
  dataId: null,
  name: null,
  layerId: null
});
exports.PROCESSOR_UPDATER_PROPS = PROCESSOR_UPDATER_PROPS;

function execute_processor_tasks(datasets, processor, visStateAction) {
  var method = processor.method,
      dataId = processor.dataId,
      attrs = processor.attrs;
  attrs.dataId = dataId[0];
  attrs.visStateAction = visStateAction;
  var dataset = datasets[dataId[0]];
  var PROCESS_ID = Object.keys(_defaultSettings.PROCESS_ITEMS).find(function (key) {
    return _defaultSettings.PROCESS_ITEMS[key] === method;
  });
  var process_func = PROCESS_TASK_FUNCS[PROCESS_ID];
  return process_func(dataset, attrs);
}

function batch_processing_task(datasets, batchAttrs, visStateAction) {
  var oddataID = batchAttrs.oddataID,
      gpsdataID = batchAttrs.gpsdataID,
      poidataID = batchAttrs.poidataID,
      spatialFilter = batchAttrs.spatialFilter,
      temporalFilter = batchAttrs.temporalFilter,
      apikey = batchAttrs.apikey,
      exportSetting = batchAttrs.exportSetting;
  var outData = exportSetting.outData,
      outColumns = exportSetting.outColumns,
      headers = exportSetting.headers;
  console.log('batch processing task');

  var new_datasets = _lodash["default"].cloneDeep(datasets);

  if (temporalFilter) {
    if (oddataID) {
      var _DATASET_COLUMNS$odda = _defaultSettings.DATASET_COLUMNS.oddata,
          datetime = _DATASET_COLUMNS$odda.datetime,
          date = _DATASET_COLUMNS$odda.date;
      new_datasets[oddataID] = (0, _datasetExtensionUtils.reset_index_dataset)((0, _temporalProcessorUtils.batch_temporal_filter_process)(new_datasets[oddataID], datetime[0], date[0], temporalFilter)); // delete new_datasets[oddataID]
    }

    if (gpsdataID) {
      var _datetime = _defaultSettings.DATASET_COLUMNS.gpsdata.datetime;
      new_datasets[gpsdataID] = (0, _datasetExtensionUtils.reset_index_dataset)((0, _temporalProcessorUtils.batch_temporal_filter_process)(new_datasets[gpsdataID], _datetime, _datetime, temporalFilter)); // delete new_datasets[gpsdataID]
    }

    if (poidataID) {
      var _DATASET_COLUMNS$poid = _defaultSettings.DATASET_COLUMNS.poidata,
          _datetime2 = _DATASET_COLUMNS$poid.datetime,
          _date = _DATASET_COLUMNS$poid.date;
      new_datasets[poidataID] = (0, _datasetExtensionUtils.reset_index_dataset)((0, _temporalProcessorUtils.batch_temporal_filter_process)(new_datasets[poidataID], _datetime2[0], _date[0], temporalFilter)); // delete new_datasets[poidataID]
    }
  } //here conduct temporal interaction


  console.log('here conduct temporal interaction');

  if (oddataID && gpsdataID && outData.filter(function (x) {
    return /GPS/.test(x);
  }).length > 0) {
    if (temporalFilter) {
      new_datasets[gpsdataID] = (0, _datasetExtensionUtils.reset_index_dataset)((0, _datasetExtensionUtils.range_joining)(new_datasets[gpsdataID], new_datasets[oddataID], null, false, _defaultSettings.DATASET_COLUMNS['gpsdata'].datetime[0], _defaultSettings.DATASET_COLUMNS['oddata'].datetime[0], false));
    }
  } //here conduct spatial filtering, issue: spatialFiltering requires async, how to merge here?


  if (spatialFilter) {
    console.log('spatial Filter generation');
    var level = spatialFilter.level,
        coordsModify = spatialFilter.coordsModify,
        geometryFilter = spatialFilter.geometryFilter;

    if (geometryFilter) {
      new_datasets = (0, _spatialProcessorUtils.batch_spatial_geometry_filter)(new_datasets, geometryFilter, oddataID, gpsdataID, poidataID);
    }

    console.log(level);

    if (level && outData.filter(function (x) {
      return /{activity|visited}/.test(x);
    })) {
      var total_cols = [];

      if (oddataID) {
        total_cols = total_cols.concat((0, _datasetExtensionUtils.distinct_value_lists)(new_datasets[oddataID], _defaultSettings.DATASET_COLUMNS['oddata']['id']));
      }

      if (poidataID) {
        total_cols = total_cols.concat((0, _datasetExtensionUtils.distinct_value_lists)(new_datasets[oddataID], _defaultSettings.DATASET_COLUMNS['oddata']['id']));
      }

      var query_id_list = _lodash["default"].uniq(total_cols);

      var paras = {
        atype: coordsModify ? 'batchmod' : 'batchgen',
        engine: 'google',
        lang: 'ja',
        token: apikey,
        precision: _defaultSettings.ADDRESS_LEVEL_DICT[level]
      };
      var api_template = 'http://localhost:8000/api/queryid?';

      if (query_id_list.length === 0) {
        return {
          result: new_datasets,
          flag: 1
        };
      }

      console.log('api query list task here'); //here to determine future process issues

      return {
        result: (0, _googleapiProcessorUtils.getAPIQueryListTasks)(query_id_list.map(function (x) {
          var url = api_template + new URLSearchParams(_objectSpread(_objectSpread({}, paras), {
            place_id: x
          })).toString();
          return url;
        }), visStateAction, new_datasets),
        flag: 2
      };
    }
  } //todo: how to make the file downloadable?
  // return exportFilteringProcess(datasets,exportSetting)


  return {
    result: new_datasets,
    flag: 1
  };
}

function add_dataset_columns(dataset, columns, data_types, values, if_exists) {}

function update_dataset_column(dataset, column, values) {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,