"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _userGuides = require("../constants/user-guides");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notification
 * @param {object} opt
 * @param {string} opt.message - Message to display during the notification
 * @param {string} opt.type - The type of message. One of DEFAULT_NOTIFICATION_TYPES
 * @param {string} opt.topic - The topic the notification belongs to. One of DEFAULT_NOTIFICATION_TOPICS
 * @param {string} opt.id optional id for notification. If not provided it will be generated by the method
 * @param {object} opt.options - Extra parameters to store as part of hte notification
 * @returns {object}
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_defaultSettings.DEFAULT_UUID_COUNT) : _ref$id,
      options = (0, _objectWithoutProperties2["default"])(_ref, ["message", "type", "topic", "id"]);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic
  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_userGuides.BUG_REPORT_LINK, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJvcHRpb25zIiwiZXJyb3JOb3RpZmljYXRpb24iLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsIkJVR19SRVBPUlRfTElOSyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBRUE7O0FBT0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0Esa0JBQVQsT0FNSjtBQUFBLDBCQUxEQyxPQUtDO0FBQUEsTUFMREEsT0FLQyw2QkFMU0MsNkNBS1Q7QUFBQSx1QkFKREMsSUFJQztBQUFBLE1BSkRBLElBSUMsMEJBSk1DLDRDQUEyQkMsSUFJakM7QUFBQSx3QkFIREMsS0FHQztBQUFBLE1BSERBLEtBR0MsMkJBSE9DLDZDQUE0QkMsTUFHbkM7QUFBQSxxQkFGREMsRUFFQztBQUFBLE1BRkRBLEVBRUMsd0JBRkksMkJBQWVDLG1DQUFmLENBRUo7QUFBQSxNQURFQyxPQUNGO0FBQ0QseUNBQ0tBLE9BREw7QUFFRUYsSUFBQUEsRUFBRSxFQUFGQSxFQUZGO0FBR0VSLElBQUFBLE9BQU8sRUFBUEEsT0FIRjtBQUlFRSxJQUFBQSxJQUFJLEVBQUpBLElBSkY7QUFLRUcsSUFBQUEsS0FBSyxFQUFMQTtBQUxGO0FBT0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxJQUFNTSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUFELE9BQU87QUFBQSx5Q0FDbkNYLGtCQUFrQixDQUFDVyxPQUFELENBRGlCO0FBRXRDUixJQUFBQSxJQUFJLEVBQUVDLDRDQUEyQlM7QUFGSztBQUFBLENBQWpDO0FBS1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFDTyxJQUFNQyxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUFILE9BQU87QUFBQSx5Q0FDckNYLGtCQUFrQixDQUFDVyxPQUFELENBRG1CO0FBRXhDUixJQUFBQSxJQUFJLEVBQUVDLDRDQUEyQlc7QUFGTztBQUFBLENBQW5DOzs7O0FBS0EsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFBTCxPQUFPO0FBQUEsU0FDckNDLGlCQUFpQixpQ0FDWkQsT0FEWTtBQUVmTCxJQUFBQSxLQUFLLEVBQUVDLDZDQUE0QkMsTUFGcEI7QUFHZlAsSUFBQUEsT0FBTyxvSEFBNkdnQiwyQkFBN0c7QUFIUSxLQURvQjtBQUFBLENBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIyIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtnZW5lcmF0ZUhhc2hJZH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7XG4gIERFRkFVTFRfTk9USUZJQ0FUSU9OX01FU1NBR0UsXG4gIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUyxcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMsXG4gIERFRkFVTFRfVVVJRF9DT1VOVFxufSBmcm9tICdjb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XG5cbmltcG9ydCB7QlVHX1JFUE9SVF9MSU5LfSBmcm9tICdjb25zdGFudHMvdXNlci1ndWlkZXMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBub3RpZmljYXRpb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHQubWVzc2FnZSAtIE1lc3NhZ2UgdG8gZGlzcGxheSBkdXJpbmcgdGhlIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG9wdC50eXBlIC0gVGhlIHR5cGUgb2YgbWVzc2FnZS4gT25lIG9mIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0LnRvcGljIC0gVGhlIHRvcGljIHRoZSBub3RpZmljYXRpb24gYmVsb25ncyB0by4gT25lIG9mIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDU1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdC5pZCBvcHRpb25hbCBpZCBmb3Igbm90aWZpY2F0aW9uLiBJZiBub3QgcHJvdmlkZWQgaXQgd2lsbCBiZSBnZW5lcmF0ZWQgYnkgdGhlIG1ldGhvZFxuICogQHBhcmFtIHtvYmplY3R9IG9wdC5vcHRpb25zIC0gRXh0cmEgcGFyYW1ldGVycyB0byBzdG9yZSBhcyBwYXJ0IG9mIGh0ZSBub3RpZmljYXRpb25cbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oe1xuICBtZXNzYWdlID0gREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcbiAgdHlwZSA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLmluZm8sXG4gIHRvcGljID0gREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLmdsb2JhbCxcbiAgaWQgPSBnZW5lcmF0ZUhhc2hJZChERUZBVUxUX1VVSURfQ09VTlQpLFxuICAuLi5vcHRpb25zXG59KSB7XG4gIHJldHVybiB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBpZCxcbiAgICBtZXNzYWdlLFxuICAgIHR5cGUsXG4gICAgdG9waWNcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVycm9yIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiAobnVsbHxudW1iZXIpfX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVycm9yTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLmVycm9yXG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3VjY2VzcyBub3RpZmljYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3RvcGljLCBpZCwgbWVzc2FnZSwgdHlwZTogbnVsbH19XG4gKi9cbmV4cG9ydCBjb25zdCBzdWNjZXNzTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLnN1Y2Nlc3Ncbn0pO1xuXG5leHBvcnQgY29uc3QgZXhwb3J0SW1hZ2VFcnJvciA9IG9wdGlvbnMgPT5cbiAgZXJyb3JOb3RpZmljYXRpb24oe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgdG9waWM6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXG4gICAgbWVzc2FnZTogYEZhaWxlZCB0byBleHBvcnQgaW1hZ2UsIHBsZWFzZSB0YWtlIGEgc2NyZWVuc2hvdCBvZiB0aGUgamF2YXNjcmlwdCBjb25zb2xlLCByZXBvcnQgdGhlIHdpdGggW3RoaXMgbGlua10oJHtCVUdfUkVQT1JUX0xJTkt9KSBgXG4gIH0pO1xuIl19