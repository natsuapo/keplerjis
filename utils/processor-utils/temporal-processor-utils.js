"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.time_flooring = time_flooring;
exports.date_filter_process = date_filter_process;
exports.time_filter_process = time_filter_process;
exports.batch_temporal_filter_process = batch_temporal_filter_process;

var _datasetExtensionUtils = require("../dataset-extension-utils");

var _dateUtils = require("../date-utils");

var _lodash = _interopRequireDefault(require("lodash"));

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//no need to change data format
function time_flooring(dataset, attrs) {
  var col = attrs.col,
      minute_unit = attrs.minute_unit,
      outColumn = attrs.outColumn,
      replace = attrs.replace;
  var col_info = dataset.fields.filter(function (x) {
    return col === x.name;
  });

  if (col_info.length === 0 || minute_unit == null) {
    return dataset;
  } else {
    var column_spec = col_info[0];
    var format = column_spec.format;

    if (!outColumn) {
      dataset.dataContainer._rows = dataset.dataContainer._rows.map(function (x) {
        x[column_spec.fieldIdx] = (0, _dateUtils.floorTime)(x[column_spec.fieldIdx], format, minute_unit);
        return x;
      });
    } else {
      dataset = (0, _datasetExtensionUtils.add_dataset_column)(dataset, outColumn, 'float', dataset.dataContainer._rows.map(function (x) {
        return (0, _dateUtils.floorTime)(x[column_spec.fieldIdx], format, minute_unit);
      }), replace);
    }
  }

  return dataset;
} //only include those date only in the selected area:


function date_filter_process(dataset, col, dow, daterange, removeHolidayFlag) {
  console.log('run date filter process');
  var col_info = dataset.fields.filter(function (x) {
    return col === x.name;
  });

  if (col_info.length === 0) {
    return dataset;
  }

  if (Array.isArray(col)) {
    var column_spec = col_info[0];
    dataset.dataContainer._rows = dataset.dataContainer._rows.filter(function (x) {
      (0, _dateUtils.dateFilter)(x[column_spec.fieldsIdx], dow, daterange, removeHolidayFlag);
    });
  }

  return dataset;
}

function time_filter_process(dataset, col, startTime, endTime) {
  var col_target = (!Array.isArray(col) ? [col] : col).map(function (x) {
    col = dataset.fields.filter(function (x) {
      return col === x.name;
    });
    return col.length >= 1 ? col[0] : null;
  });
  dataset.dataContainer._rows = dataset.dataContainer._rows.filter(function (x) {
    return col_target.length === 1 ? (0, _dateUtils.timeFilter)(x[col_target[0].fieldIdx], [startTime, endTime]) : (0, _dateUtils.timeRangeFilter)(x[col_target[0]], x[col_target[1]]);
  });
  return dataset;
} //this will be a batch fu


function batch_temporal_filter_process(dataset, timeCols, dateCols, temporalFilter) {
  // date_cols
  var dow = temporalFilter.dow,
      dateRange = temporalFilter.dateRange,
      removeHoliday = temporalFilter.removeHoliday,
      startTime = temporalFilter.startTime,
      endTime = temporalFilter.endTime,
      floor = temporalFilter.floor;

  var new_dataset = _lodash["default"].cloneDeep(dataset);

  new_dataset = dateCols.reduce(function (ds, col) {
    return date_filter_process(ds, col, dow, dateRange, removeHoliday);
  }, new_dataset);
  new_dataset = timeCols.reduce(function (ds, col) {
    return time_filter_process(ds, col, startTime, endTime);
  }, new_dataset);
  new_dataset = timeCols.reduce(function (ds, col) {
    return time_flooring(ds, {
      col: col,
      minute_unit: floor,
      outColumn: null
    });
  }, new_dataset);
  console.log('finished temporal filter process');
  return new_dataset;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,