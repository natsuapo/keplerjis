"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.google_place_id_query = google_place_id_query;
exports.geocoding_api_query = geocoding_api_query;
exports.server_place_id_query = server_place_id_query;
exports.server_poi_type_query = server_poi_type_query;
exports.server_geocoding_query = server_geocoding_query;
exports.google_reverse_geocoding_query = google_reverse_geocoding_query;
exports.AutoTotalAPIQueryTasks = AutoTotalAPIQueryTasks;
exports.getAPIQueryTasks = getAPIQueryTasks;
exports.getAPIQueryListTasks = getAPIQueryListTasks;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _datasetExtensionUtils = require("../dataset-extension-utils");

var _tasks = _interopRequireDefault(require("react-palm/tasks"));

var _tasks2 = require("../../tasks/tasks");

var _defaultSettings = require("../../constants/default-settings");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// import {addTableColumn} from '../../actions';
// import {addTableColumn} from '../../actions/vis-state-actions';
//deprecated
function google_place_id_query(dataset, attrs) {
  console.log('google query');
  var col = attrs.col,
      key = attrs.key,
      id = attrs.id,
      precision = attrs.precision,
      visStateAction = attrs.visStateAction,
      replace = attrs.replace;
  var paras = {
    fields: 'name,type,formatted_address,address_components',
    language: 'ja',
    key: key
  };
  var api_template = 'https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/details/json?';
  var df = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, null);
  df = df.map(function (x) {
    return x.set('url', api_template + new URLSearchParams(_objectSpread(_objectSpread({}, paras), {
      atype: 'addgen',
      place_id: x.get(col)
    })).toString());
  });
  return getAPIQueryTasks(id, df.select('url').toArray().map(function (x) {
    return x[0];
  }), visStateAction, 'address_example', 'address', replace);
}

function geocoding_api_query(dataset, attrs) {
  console.log('geocoding query');
  var col = attrs.col,
      key = attrs.key,
      dataId = attrs.dataId,
      visStateAction = attrs.visStateAction,
      precision = attrs.precision,
      outColumn = attrs.outColumn,
      replace = attrs.replace;
  var paras = {
    atype: 'geocoding',
    engine: 'google',
    lang: 'ja',
    token: key
  };
  var api_template = 'http://localhost:8000/api/geocoding?';
  var df = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, null);
  df = df.map(function (x) {
    return x.set('url', api_template + new URLSearchParams(_objectSpread(_objectSpread({}, paras), {
      address: x.get(col)
    })).toString());
  });
  return getAPIQueryTasks(dataId, df.select('url').toArray().map(function (x) {
    return x[0];
  }), visStateAction, outColumn, 'latlng', replace, 'real');
}

function server_place_id_query(dataset, attrs) {
  console.log('google query');
  var col = attrs.col,
      key = attrs.key,
      dataId = attrs.dataId,
      visStateAction = attrs.visStateAction,
      precision = attrs.precision,
      outColumn = attrs.outColumn,
      replace = attrs.replace;
  var paras = {
    atype: 'addgen',
    engine: 'google',
    lang: 'ja',
    token: key,
    precision: _defaultSettings.ADDRESS_LEVEL_DICT[precision]
  };
  var api_template = 'http://localhost:8000/api/queryid?';
  var df = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, null);
  df = df.map(function (x) {
    return x.set('url', api_template + new URLSearchParams(_objectSpread(_objectSpread({}, paras), {
      place_id: x.get(col)
    })).toString());
  });
  return getAPIQueryTasks(dataId, df.select('url').toArray().map(function (x) {
    return x[0];
  }), visStateAction, outColumn, 'address', replace);
}

function server_poi_type_query(dataset, attrs) {
  // console.log('google query poi')
  var col = attrs.col,
      key = attrs.key,
      dataId = attrs.dataId,
      visStateAction = attrs.visStateAction,
      outColumn = attrs.outColumn,
      replace = attrs.replace;
  var paras = {
    atype: 'poitype',
    engine: 'google',
    lang: 'ja',
    token: key
  };
  var api_template = 'http://localhost:8000/api/queryid?';
  var df = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, null);
  df = df.map(function (x) {
    return x.set('url', api_template + new URLSearchParams(_objectSpread(_objectSpread({}, paras), {
      place_id: x.get(col)
    })).toString());
  });
  return getAPIQueryTasks(dataId, df.select('url').toArray().map(function (x) {
    return x[0];
  }), visStateAction, outColumn, 'poitype', replace);
}

function server_geocoding_query(dataset, attrs) {}

function google_reverse_geocoding_query(dataset, place_id_col) {}

function AutoTotalAPIQueryTasks(datasets, visStateActions) {}

function getAPIQueryTasks(dataId, query_list, visStateActions) {
  var query_col = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'api_result';
  var return_key = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'address';
  var replace = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var data_type = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'string';
  console.log('get api query tasks' + dataId);
  return [_tasks["default"].all(query_list.map(_tasks2.LOAD_API_TASK)).bimap(function (results) {
    console.log('successfully get api result');
    visStateActions.visStateAction.addTableColumn(dataId, query_col, data_type, results.map(function (x) {
      return x[return_key];
    }, replace));
    visStateActions.visStateAction.removeProcessor(true);
  }, function (error) {
    console.log(error);
    visStateActions.visStateAction.removeProcessor(false);
    return null;
  })];
}

function getAPIQueryListTasks(query_list, visStateActions, datasets) {
  return [_tasks["default"].all(query_list.map(_tasks2.LOAD_API_TASK)).bimap(function (results) {
    console.log('successfully get api result');
    visStateActions.visStateAction.GMTModifyTableColumn(results, datasets); // visStateActions.visStateAction.removeProcessor(true)
  }, function (error) {
    console.log(error); // visStateActions.visStateAction.removeProcessor(false)

    return null;
  })];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,