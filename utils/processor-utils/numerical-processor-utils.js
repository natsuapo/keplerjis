"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.digit_slicing = digit_slicing;

var _datasetExtensionUtils = require("../dataset-extension-utils");

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function digit_slicing(dataset, attrs) {
  var col = attrs.col,
      digit = attrs.digit,
      outColumn = attrs.outColumn,
      replace = attrs.replace;
  var col_info = dataset.fields.filter(function (x) {
    return col === x.name;
  });

  if (col_info.length === 0 || digit == null) {
    return dataset;
  } else {
    var column_spec = col_info[0];

    if (!outColumn) {
      dataset.dataContainer._rows = dataset.dataContainer._rows.map(function (x) {
        x[column_spec.fieldIdx] = x[column_spec.fieldIdx].toFixed(digit[0]);
        return x;
      });
    } else {
      dataset = (0, _datasetExtensionUtils.add_dataset_column)(dataset, outColumn, 'float', dataset.dataContainer._rows.map(function (x) {
        return x[column_spec.fieldIdx].toFixed(digit[0]);
      }), replace);
    }

    return dataset;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9wcm9jZXNzb3ItdXRpbHMvbnVtZXJpY2FsLXByb2Nlc3Nvci11dGlscy5qcyJdLCJuYW1lcyI6WyJkaWdpdF9zbGljaW5nIiwiZGF0YXNldCIsImF0dHJzIiwiY29sIiwiZGlnaXQiLCJvdXRDb2x1bW4iLCJyZXBsYWNlIiwiY29sX2luZm8iLCJmaWVsZHMiLCJmaWx0ZXIiLCJ4IiwibmFtZSIsImxlbmd0aCIsImNvbHVtbl9zcGVjIiwiZGF0YUNvbnRhaW5lciIsIl9yb3dzIiwibWFwIiwiZmllbGRJZHgiLCJ0b0ZpeGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBb0JBOztBQXBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlPLFNBQVNBLGFBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDQyxLQUFoQyxFQUFzQztBQUFBLE1BQ3BDQyxHQURvQyxHQUNMRCxLQURLLENBQ3BDQyxHQURvQztBQUFBLE1BQ2hDQyxLQURnQyxHQUNMRixLQURLLENBQ2hDRSxLQURnQztBQUFBLE1BQzFCQyxTQUQwQixHQUNMSCxLQURLLENBQzFCRyxTQUQwQjtBQUFBLE1BQ2hCQyxPQURnQixHQUNMSixLQURLLENBQ2hCSSxPQURnQjtBQUUzQyxNQUFNQyxRQUFRLEdBQUdOLE9BQU8sQ0FBQ08sTUFBUixDQUFlQyxNQUFmLENBQXNCLFVBQUNDLENBQUQ7QUFBQSxXQUFPUCxHQUFHLEtBQUtPLENBQUMsQ0FBQ0MsSUFBakI7QUFBQSxHQUF0QixDQUFqQjs7QUFDQSxNQUFHSixRQUFRLENBQUNLLE1BQVQsS0FBb0IsQ0FBcEIsSUFBeUJSLEtBQUssSUFBSSxJQUFyQyxFQUEwQztBQUN4QyxXQUFPSCxPQUFQO0FBQ0QsR0FGRCxNQUdJO0FBQ0YsUUFBSVksV0FBVyxHQUFHTixRQUFRLENBQUMsQ0FBRCxDQUExQjs7QUFDQSxRQUFHLENBQUNGLFNBQUosRUFBYztBQUNaSixNQUFBQSxPQUFPLENBQUNhLGFBQVIsQ0FBc0JDLEtBQXRCLEdBQThCZCxPQUFPLENBQUNhLGFBQVIsQ0FBc0JDLEtBQXRCLENBQTRCQyxHQUE1QixDQUFnQyxVQUFDTixDQUFELEVBQU87QUFDbkVBLFFBQUFBLENBQUMsQ0FBQ0csV0FBVyxDQUFDSSxRQUFiLENBQUQsR0FBMEJQLENBQUMsQ0FBQ0csV0FBVyxDQUFDSSxRQUFiLENBQUQsQ0FBd0JDLE9BQXhCLENBQWdDZCxLQUFLLENBQUMsQ0FBRCxDQUFyQyxDQUExQjtBQUNBLGVBQU9NLENBQVA7QUFDRCxPQUg2QixDQUE5QjtBQUlELEtBTEQsTUFNSTtBQUNGVCxNQUFBQSxPQUFPLEdBQUcsK0NBQW1CQSxPQUFuQixFQUEyQkksU0FBM0IsRUFBcUMsT0FBckMsRUFBNkNKLE9BQU8sQ0FBQ2EsYUFBUixDQUFzQkMsS0FBdEIsQ0FBNEJDLEdBQTVCLENBQWdDLFVBQUNOLENBQUQ7QUFBQSxlQUFPQSxDQUFDLENBQUNHLFdBQVcsQ0FBQ0ksUUFBYixDQUFELENBQXdCQyxPQUF4QixDQUFnQ2QsS0FBSyxDQUFDLENBQUQsQ0FBckMsQ0FBUDtBQUFBLE9BQWhDLENBQTdDLEVBQStIRSxPQUEvSCxDQUFWO0FBQ0Q7O0FBRUQsV0FBT0wsT0FBUDtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2FkZF9kYXRhc2V0X2NvbHVtbiwgZ2VuZXJhdGVfZGF0YWZyYW1lX2Zyb21fZGF0YXNldH0gZnJvbSAnLi4vZGF0YXNldC1leHRlbnNpb24tdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlnaXRfc2xpY2luZyhkYXRhc2V0LCBhdHRycyl7XG4gIGNvbnN0IHtjb2wsZGlnaXQsb3V0Q29sdW1uLHJlcGxhY2V9ID0gYXR0cnNcbiAgY29uc3QgY29sX2luZm8gPSBkYXRhc2V0LmZpZWxkcy5maWx0ZXIoKHgpID0+IGNvbCA9PT0geC5uYW1lKTtcbiAgaWYoY29sX2luZm8ubGVuZ3RoID09PSAwIHx8IGRpZ2l0ID09IG51bGwpe1xuICAgIHJldHVybiBkYXRhc2V0XG4gIH1cbiAgZWxzZXtcbiAgICBsZXQgY29sdW1uX3NwZWMgPSBjb2xfaW5mb1swXTtcbiAgICBpZighb3V0Q29sdW1uKXtcbiAgICAgIGRhdGFzZXQuZGF0YUNvbnRhaW5lci5fcm93cyA9IGRhdGFzZXQuZGF0YUNvbnRhaW5lci5fcm93cy5tYXAoKHgpID0+IHtcbiAgICAgICAgeFtjb2x1bW5fc3BlYy5maWVsZElkeF0gPSB4W2NvbHVtbl9zcGVjLmZpZWxkSWR4XS50b0ZpeGVkKGRpZ2l0WzBdKVxuICAgICAgICByZXR1cm4geFxuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBkYXRhc2V0ID0gYWRkX2RhdGFzZXRfY29sdW1uKGRhdGFzZXQsb3V0Q29sdW1uLCdmbG9hdCcsZGF0YXNldC5kYXRhQ29udGFpbmVyLl9yb3dzLm1hcCgoeCkgPT4geFtjb2x1bW5fc3BlYy5maWVsZElkeF0udG9GaXhlZChkaWdpdFswXSkpLHJlcGxhY2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGFzZXRcbiAgfVxufVxuXG5cbiJdfQ==