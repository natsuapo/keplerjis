"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wkb_generation = wkb_generation;
exports.centroid_extraction = centroid_extraction;
exports.simplification = simplification;
exports.pointSampling = pointSampling;
exports.meshcode_generalization = meshcode_generalization;
exports.meshcode_generation = meshcode_generation;
exports.meshcode_aggregation = meshcode_aggregation;
exports.buffering = buffering;
exports.spatial_masking = spatial_masking;
exports.spatial_join = spatial_join;
exports.spatial_masking_by_geometry = spatial_masking_by_geometry;
exports.batch_spatial_geometry_filter = batch_spatial_geometry_filter;

var _datasetExtensionUtils = require("../dataset-extension-utils");

var _visStateActions = require("../../actions/vis-state-actions");

var _dataProcessor = require("../../processors/data-processor");

var _defaultSettings = require("../../constants/default-settings");

var turf = _interopRequireWildcard(require("@turf/turf"));

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function wkb_generation(dataset, attrs) {
  var geom_col = attrs.geom_col,
      outColumn = attrs.outColumn;
  console.log('run wkb generating');
  var gdf = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, geom_col);
  gdf.toWkb();
  var wkb_list = {
    analyzerType: "STRING",
    displayName: outColumn,
    fieldIdx: dataset.fields.length,
    format: "",
    id: outColumn,
    name: outColumn,
    type: "string"
  };
  dataset.dataContainer._rows = gdf.toArray();
  dataset.fields.push(wkb_list);
  dataset.dataContainer._numColumns = dataset.dataContainer._numColumns + 1;
  return dataset;
}

function centroid_extraction(dataset, col_id) {}

function simplification() {}

function pointSampling() {}

function meshcode_generalization() {
  (0, _visStateActions.addTableColumn)();
}

function meshcode_generation(dataset, attr) {
  var geom_col = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_geojson';
  var gdf = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataset, geom_col);
} //难度：需要添加layer,如何进行更新？


function meshcode_aggregation(dataset, attr) {
  var geom_col = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_geojson';
} //todo: buffering spatial data;


function buffering(dataset, attr) {
  var geom_col = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_geojson';
} //there are several functions


function spatial_masking(oriDataset, joinDataset, how, replace, geomCol, joinGeomCol) {
  console.log('spatial masking');
  var gdf = Array.isArray(geomCol) ? (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(oriDataset, null, geomCol[0], geomCol[1]) : (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(oriDataset, geomCol);
  var joint_gdf = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(joinDataset, joinGeomCol);
  var geom_union = joint_gdf.union();
  var out_gdf = how === 'contain' ? gdf.contains(geom_union) : 'within' ? gdf.within(geom_union) : 'intersect' ? gdf.intersects(geom_union) : null;
  return (0, _dataProcessor.processCsvData)(out_gdf.toArray(), out_gdf.listColumns());
} //todo: spatial join


function spatial_join(oriDataset, joinDataset, how, replace, geomCol, joinGeomCol) {}

function spatial_masking_by_geometry(dataSet, geomCol, jointGeometry) {
  var how = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'contains';
  var drop_geom = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var gdf = (0, _datasetExtensionUtils.generate_dataframe_from_dataset)(dataSet, geomCol);
  var out_gdf = how === 'contain' ? gdf.contains(jointGeometry) : 'within' ? gdf.within(jointGeometry) : 'intersect' ? gdf.intersects(jointGeometry) : null;
  dataSet.dataContainer._rows = drop_geom ? out_gdf.df.drop(out_gdf.geom_col).toArray() : out_gdf.df.toArray();
  return dataSet;
} // export function spatial_join


function batch_spatial_geometry_filter(datasets, geometryFilter, oddataID, gpsdataID, poidataID) {
  console.log('batch geometry filter');
  var filter_geom = turf.feature(_defaultSettings.GEOMETRY_RANGE[geometryFilter].geometry);

  if (oddataID) {
    var geom_cols = _defaultSettings.DATASET_COLUMNS['oddata']['gps'].concat(_defaultSettings.DATASET_COLUMNS['oddata']['geometry']);

    datasets[oddataID] = (0, _datasetExtensionUtils.reset_index_dataset)(geom_cols.reduce(function (ds, col) {
      return spatial_masking_by_geometry(ds, col, filter_geom, 'contains', Array.isArray(col));
    }, datasets[oddataID]));
  }

  if (gpsdataID) {
    var _geom_cols = _defaultSettings.DATASET_COLUMNS['gpsdata']['gps'];
    datasets[gpsdataID] = (0, _datasetExtensionUtils.reset_index_dataset)(_geom_cols.reduce(function (ds, col) {
      return spatial_masking_by_geometry(ds, col, filter_geom, 'contains', Array.isArray(col));
    }, datasets[gpsdataID]));
  }

  if (poidataID) {
    var _geom_cols2 = _defaultSettings.DATASET_COLUMNS['poidata']['gps'];
    datasets[poidataID] = (0, _datasetExtensionUtils.reset_index_dataset)(_geom_cols2.reduce(function (ds, col) {
      return spatial_masking_by_geometry(ds, col, filter_geom, 'contains', Array.isArray(col));
    }, datasets[poidataID]));
  }

  return datasets;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,