"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterAnimationControllerFactory = FilterAnimationControllerFactory;
exports.LayerAnimationControllerFactory = LayerAnimationControllerFactory;
exports["default"] = BottomWidgetFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

var _defaultSettings = require("../constants/default-settings");

var _filterUtils = require("../utils/filter-utils");

var _templateObject;

var propTypes = {
  filters: _propTypes["default"].arrayOf(_propTypes["default"].object),
  datasets: _propTypes["default"].object,
  uiState: _propTypes["default"].object,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
  animationConfig: _propTypes["default"].object,
  visStateActions: _propTypes["default"].object,
  sidePanelWidth: _propTypes["default"].number,
  containerW: _propTypes["default"].number
};
var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  width: ", "px;\n  bottom: 0;\n  right: 0;\n  z-index: 1;\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
});

FilterAnimationControllerFactory.deps = [_animationController["default"]];

function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var filter = _ref.filter,
        filterIdx = _ref.filterIdx,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        children = _ref.children;
    var intervalBins = (0, _react.useMemo)(function () {
      return (0, _filterUtils.getIntervalBins)(filter);
    }, [filter]);
    var steps = (0, _react.useMemo)(function () {
      return intervalBins ? intervalBins.map(function (x) {
        return x.x0;
      }) : null;
    }, [intervalBins]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _defaultSettings.ANIMATION_WINDOW.interval:
          var idx = value[1];
          setFilterAnimationTime(filterIdx, 'value', [intervalBins[idx].x0, intervalBins[idx].x1 - 1]);
          break;

        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, intervalBins, filter.animationWindow, setFilterAnimationTime]);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation,
      children: children
    });
  };

  return FilterAnimationController;
}

LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref2) {
    var animationConfig = _ref2.animationConfig,
        setLayerAnimationTime = _ref2.setLayerAnimationTime,
        children = _ref2.children;
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: animationConfig.currentTime,
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      updateAnimation: setLayerAnimationTime,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _defaultSettings.ANIMATION_WINDOW.interval : _defaultSettings.ANIMATION_WINDOW.point,
      children: children
    });
  };

  return LayerAnimationController;
}

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], FilterAnimationControllerFactory, LayerAnimationControllerFactory];
/* eslint-disable complexity */

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.enlarged && f.type === _defaultSettings.FILTER_TYPES.timeRange;
      });
    }, [filters]);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation && !animationConfig.hideControl;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0; // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it

    var filter = animatedFilter || filters[enlargedFilterIdx];
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, reset) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
        animationConfig: animationConfig,
        setLayerAnimationTime: visStateActions.setLayerAnimationTime,
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: reset
      }) : null;
    }), filter && /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: filter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation) {
      return showTimeWidget ? /*#__PURE__*/_react["default"].createElement(TimeWidget // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        width: enlargedFilterWidth,
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        isAnyFilterAnimating: Boolean(animatedFilter),
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilter: visStateActions.setFilter,
        setFilterAnimationTime: visStateActions.setFilterAnimationTime,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        enlargeFilter: visStateActions.enlargeFilter,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating
      }) : null;
    }));
  };

  BottomWidget.propTypes = propTypes;
  return BottomWidget;
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2JvdHRvbS13aWRnZXQuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwiZmlsdGVycyIsIlByb3BUeXBlcyIsImFycmF5T2YiLCJvYmplY3QiLCJkYXRhc2V0cyIsInVpU3RhdGUiLCJsYXllcnMiLCJhbmltYXRpb25Db25maWciLCJ2aXNTdGF0ZUFjdGlvbnMiLCJzaWRlUGFuZWxXaWR0aCIsIm51bWJlciIsImNvbnRhaW5lclciLCJtYXhXaWR0aCIsIkJvdHRvbVdpZGdldENvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsInByb3BzIiwiaGFzUGFkZGluZyIsInRoZW1lIiwiYm90dG9tV2lkZ2V0UGFkZGluZ1RvcCIsImJvdHRvbVdpZGdldFBhZGRpbmdSaWdodCIsImJvdHRvbVdpZGdldFBhZGRpbmdCb3R0b20iLCJib3R0b21XaWRnZXRQYWRkaW5nTGVmdCIsIndpZHRoIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJkZXBzIiwiQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sbGVyIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlciIsImZpbHRlciIsImZpbHRlcklkeCIsInNldEZpbHRlckFuaW1hdGlvblRpbWUiLCJjaGlsZHJlbiIsImludGVydmFsQmlucyIsInN0ZXBzIiwibWFwIiwieCIsIngwIiwidXBkYXRlQW5pbWF0aW9uIiwidmFsdWUiLCJhbmltYXRpb25XaW5kb3ciLCJBTklNQVRJT05fV0lORE9XIiwiaW50ZXJ2YWwiLCJpZHgiLCJ4MSIsImRvbWFpbiIsInNwZWVkIiwiaXNBbmltYXRpbmciLCJMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IiwiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyIiwic2V0TGF5ZXJBbmltYXRpb25UaW1lIiwiY3VycmVudFRpbWUiLCJ0aW1lU3RlcHMiLCJwb2ludCIsIkJvdHRvbVdpZGdldEZhY3RvcnkiLCJUaW1lV2lkZ2V0RmFjdG9yeSIsIkFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5IiwiVGltZVdpZGdldCIsIkFuaW1hdGlvbkNvbnRyb2wiLCJCb3R0b21XaWRnZXQiLCJhY3RpdmVTaWRlUGFuZWwiLCJyZWFkT25seSIsImlzT3BlbiIsIkJvb2xlYW4iLCJlbmxhcmdlZEZpbHRlcklkeCIsImZpbmRJbmRleCIsImYiLCJlbmxhcmdlZCIsInR5cGUiLCJGSUxURVJfVFlQRVMiLCJ0aW1lUmFuZ2UiLCJhbmltYXRlZEZpbHRlcklkeCIsImFuaW1hdGVkRmlsdGVyIiwiZW5sYXJnZWRGaWx0ZXJXaWR0aCIsImFuaW1hdGFibGVMYXllciIsImwiLCJjb25maWciLCJhbmltYXRpb24iLCJlbmFibGVkIiwiaXNWaXNpYmxlIiwicmVhZHlUb0FuaW1hdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIk51bWJlciIsImlzRmluaXRlIiwic2hvd0Zsb2F0aW5nVGltZURpc3BsYXkiLCJsZW5ndGgiLCJzaG93QW5pbWF0aW9uQ29udHJvbCIsImhpZGVDb250cm9sIiwic2hvd1RpbWVXaWRnZXQiLCJPYmplY3QiLCJrZXlzIiwiTWF0aCIsIm1pbiIsInN0YXJ0IiwicGF1c2UiLCJyZXNldCIsInVwZGF0ZUxheWVyQW5pbWF0aW9uU3BlZWQiLCJ0b2dnbGVMYXllckFuaW1hdGlvbiIsInJlc2V0QW5pbWF0aW9uIiwic2V0RmlsdGVyUGxvdCIsInNldEZpbHRlciIsInNldEZpbHRlckFuaW1hdGlvbldpbmRvdyIsInRvZ2dsZUZpbHRlckFuaW1hdGlvbiIsInVwZGF0ZUZpbHRlckFuaW1hdGlvblNwZWVkIiwiZW5sYXJnZUZpbHRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxPQUFPLEVBQUVDLHNCQUFVQyxPQUFWLENBQWtCRCxzQkFBVUUsTUFBNUIsQ0FETztBQUVo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O0FBMERELEdBckdEOztBQXVHQVksRUFBQUEsWUFBWSxDQUFDNUQsU0FBYixHQUF5QkEsU0FBekI7QUFFQSxTQUFPNEQsWUFBUDtBQUNEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFRpbWVXaWRnZXRGYWN0b3J5IGZyb20gJy4vZmlsdGVycy90aW1lLXdpZGdldCc7XG5pbXBvcnQgQW5pbWF0aW9uQ29udHJvbEZhY3RvcnkgZnJvbSAnLi9jb21tb24vYW5pbWF0aW9uLWNvbnRyb2wvYW5pbWF0aW9uLWNvbnRyb2wnO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vY29tbW9uL2FuaW1hdGlvbi1jb250cm9sL2FuaW1hdGlvbi1jb250cm9sbGVyJztcbmltcG9ydCB7QU5JTUFUSU9OX1dJTkRPVywgRklMVEVSX1RZUEVTfSBmcm9tICdjb25zdGFudHMvZGVmYXVsdC1zZXR0aW5ncyc7XG5pbXBvcnQge2dldEludGVydmFsQmluc30gZnJvbSAndXRpbHMvZmlsdGVyLXV0aWxzJztcblxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBmaWx0ZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgZGF0YXNldHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHVpU3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGxheWVyczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG4gIGFuaW1hdGlvbkNvbmZpZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgdmlzU3RhdGVBY3Rpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzaWRlUGFuZWxXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY29udGFpbmVyVzogUHJvcFR5cGVzLm51bWJlclxufTtcblxuY29uc3QgbWF4V2lkdGggPSAxMDgwO1xuXG5jb25zdCBCb3R0b21XaWRnZXRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmctdG9wOiAke3Byb3BzID0+IChwcm9wcy5oYXNQYWRkaW5nID8gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ1RvcCA6IDApfXB4O1xuICBwYWRkaW5nLXJpZ2h0OiAke3Byb3BzID0+IChwcm9wcy5oYXNQYWRkaW5nID8gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ1JpZ2h0IDogMCl9cHg7XG4gIHBhZGRpbmctYm90dG9tOiAke3Byb3BzID0+IChwcm9wcy5oYXNQYWRkaW5nID8gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ0JvdHRvbSA6IDApfXB4O1xuICBwYWRkaW5nLWxlZnQ6ICR7cHJvcHMgPT4gKHByb3BzLmhhc1BhZGRpbmcgPyBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nTGVmdCA6IDApfXB4O1xuICB3aWR0aDogJHtwcm9wcyA9PiBwcm9wcy53aWR0aH1weDtcbiAgYm90dG9tOiAwO1xuICByaWdodDogMDtcbiAgei1pbmRleDogMTtcbmA7XG5cbkZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LmRlcHMgPSBbQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnldO1xuZXhwb3J0IGZ1bmN0aW9uIEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5KEFuaW1hdGlvbkNvbnRyb2xsZXIpIHtcbiAgY29uc3QgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlciA9ICh7ZmlsdGVyLCBmaWx0ZXJJZHgsIHNldEZpbHRlckFuaW1hdGlvblRpbWUsIGNoaWxkcmVufSkgPT4ge1xuICAgIGNvbnN0IGludGVydmFsQmlucyA9IHVzZU1lbW8oKCkgPT4gZ2V0SW50ZXJ2YWxCaW5zKGZpbHRlciksIFtmaWx0ZXJdKTtcblxuICAgIGNvbnN0IHN0ZXBzID0gdXNlTWVtbygoKSA9PiAoaW50ZXJ2YWxCaW5zID8gaW50ZXJ2YWxCaW5zLm1hcCh4ID0+IHgueDApIDogbnVsbCksIFtcbiAgICAgIGludGVydmFsQmluc1xuICAgIF0pO1xuXG4gICAgY29uc3QgdXBkYXRlQW5pbWF0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgICB2YWx1ZSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLmFuaW1hdGlvbldpbmRvdykge1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX1dJTkRPVy5pbnRlcnZhbDpcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uVGltZShmaWx0ZXJJZHgsICd2YWx1ZScsIFtcbiAgICAgICAgICAgICAgaW50ZXJ2YWxCaW5zW2lkeF0ueDAsXG4gICAgICAgICAgICAgIGludGVydmFsQmluc1tpZHhdLngxIC0gMVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uVGltZShmaWx0ZXJJZHgsICd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2ZpbHRlcklkeCwgaW50ZXJ2YWxCaW5zLCBmaWx0ZXIuYW5pbWF0aW9uV2luZG93LCBzZXRGaWx0ZXJBbmltYXRpb25UaW1lXVxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAga2V5PVwiZmlsdGVyLWNvbnRyb2xcIlxuICAgICAgICB2YWx1ZT17ZmlsdGVyLnZhbHVlfVxuICAgICAgICBkb21haW49e2ZpbHRlci5kb21haW59XG4gICAgICAgIHNwZWVkPXtmaWx0ZXIuc3BlZWR9XG4gICAgICAgIGlzQW5pbWF0aW5nPXtmaWx0ZXIuaXNBbmltYXRpbmd9XG4gICAgICAgIGFuaW1hdGlvbldpbmRvdz17ZmlsdGVyLmFuaW1hdGlvbldpbmRvd31cbiAgICAgICAgc3RlcHM9e3N0ZXBzfVxuICAgICAgICB1cGRhdGVBbmltYXRpb249e3VwZGF0ZUFuaW1hdGlvbn1cbiAgICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuICByZXR1cm4gRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlcjtcbn1cblxuTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeS5kZXBzID0gW0FuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5XTtcbmV4cG9ydCBmdW5jdGlvbiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5KEFuaW1hdGlvbkNvbnRyb2xsZXIpIHtcbiAgY29uc3QgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyID0gKHthbmltYXRpb25Db25maWcsIHNldExheWVyQW5pbWF0aW9uVGltZSwgY2hpbGRyZW59KSA9PiAoXG4gICAgPEFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgIGtleT1cImxheWVyLWNvbnRyb2xcIlxuICAgICAgdmFsdWU9e2FuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZX1cbiAgICAgIGRvbWFpbj17YW5pbWF0aW9uQ29uZmlnLmRvbWFpbn1cbiAgICAgIHNwZWVkPXthbmltYXRpb25Db25maWcuc3BlZWR9XG4gICAgICBpc0FuaW1hdGluZz17YW5pbWF0aW9uQ29uZmlnLmlzQW5pbWF0aW5nfVxuICAgICAgdXBkYXRlQW5pbWF0aW9uPXtzZXRMYXllckFuaW1hdGlvblRpbWV9XG4gICAgICBzdGVwcz17YW5pbWF0aW9uQ29uZmlnLnRpbWVTdGVwc31cbiAgICAgIGFuaW1hdGlvbldpbmRvdz17XG4gICAgICAgIGFuaW1hdGlvbkNvbmZpZy50aW1lU3RlcHMgPyBBTklNQVRJT05fV0lORE9XLmludGVydmFsIDogQU5JTUFUSU9OX1dJTkRPVy5wb2ludFxuICAgICAgfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgIC8+XG4gICk7XG4gIHJldHVybiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI7XG59XG5cbkJvdHRvbVdpZGdldEZhY3RvcnkuZGVwcyA9IFtcbiAgVGltZVdpZGdldEZhY3RvcnksXG4gIEFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5LFxuICBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSxcbiAgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeVxuXTtcblxuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm90dG9tV2lkZ2V0RmFjdG9yeShcbiAgVGltZVdpZGdldCxcbiAgQW5pbWF0aW9uQ29udHJvbCxcbiAgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyXG4pIHtcbiAgY29uc3QgQm90dG9tV2lkZ2V0ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGFzZXRzLFxuICAgICAgZmlsdGVycyxcbiAgICAgIGFuaW1hdGlvbkNvbmZpZyxcbiAgICAgIHZpc1N0YXRlQWN0aW9ucyxcbiAgICAgIGNvbnRhaW5lclcsXG4gICAgICB1aVN0YXRlLFxuICAgICAgc2lkZVBhbmVsV2lkdGgsXG4gICAgICBsYXllcnNcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCB7YWN0aXZlU2lkZVBhbmVsLCByZWFkT25seX0gPSB1aVN0YXRlO1xuICAgIGNvbnN0IGlzT3BlbiA9IEJvb2xlYW4oYWN0aXZlU2lkZVBhbmVsKTtcblxuICAgIGNvbnN0IGVubGFyZ2VkRmlsdGVySWR4ID0gdXNlTWVtbyhcbiAgICAgICgpID0+IGZpbHRlcnMuZmluZEluZGV4KGYgPT4gZi5lbmxhcmdlZCAmJiBmLnR5cGUgPT09IEZJTFRFUl9UWVBFUy50aW1lUmFuZ2UpLFxuICAgICAgW2ZpbHRlcnNdXG4gICAgKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlcklkeCA9IHVzZU1lbW8oKCkgPT4gZmlsdGVycy5maW5kSW5kZXgoZiA9PiBmLmlzQW5pbWF0aW5nKSwgW2ZpbHRlcnNdKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlciA9IGFuaW1hdGVkRmlsdGVySWR4ID4gLTEgPyBmaWx0ZXJzW2FuaW1hdGVkRmlsdGVySWR4XSA6IG51bGw7XG5cbiAgICBjb25zdCBlbmxhcmdlZEZpbHRlcldpZHRoID0gaXNPcGVuID8gY29udGFpbmVyVyAtIHNpZGVQYW5lbFdpZHRoIDogY29udGFpbmVyVztcblxuICAgIC8vIHNob3cgcGxheWJhY2sgY29udHJvbCBpZiBsYXllcnMgY29udGFpbiB0cmlwIGxheWVyICYgYXQgbGVhc3Qgb25lIHRyaXAgbGF5ZXIgaXMgdmlzaWJsZVxuICAgIGNvbnN0IGFuaW1hdGFibGVMYXllciA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBsYXllcnMuZmlsdGVyKGwgPT4gbC5jb25maWcuYW5pbWF0aW9uICYmIGwuY29uZmlnLmFuaW1hdGlvbi5lbmFibGVkICYmIGwuY29uZmlnLmlzVmlzaWJsZSksXG4gICAgICBbbGF5ZXJzXVxuICAgICk7XG5cbiAgICBjb25zdCByZWFkeVRvQW5pbWF0aW9uID1cbiAgICAgIEFycmF5LmlzQXJyYXkoYW5pbWF0aW9uQ29uZmlnLmRvbWFpbikgJiYgTnVtYmVyLmlzRmluaXRlKGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZSk7XG4gICAgLy8gaWYgYW5pbWF0aW9uIGNvbnRyb2wgaXMgc2hvd2luZywgaGlkZSB0aW1lIGRpc3BsYXkgaW4gdGltZSBzbGlkZXJcbiAgICBjb25zdCBzaG93RmxvYXRpbmdUaW1lRGlzcGxheSA9ICFhbmltYXRhYmxlTGF5ZXIubGVuZ3RoO1xuICAgIGNvbnN0IHNob3dBbmltYXRpb25Db250cm9sID1cbiAgICAgIGFuaW1hdGFibGVMYXllci5sZW5ndGggJiYgcmVhZHlUb0FuaW1hdGlvbiAmJiAhYW5pbWF0aW9uQ29uZmlnLmhpZGVDb250cm9sO1xuICAgIGNvbnN0IHNob3dUaW1lV2lkZ2V0ID0gZW5sYXJnZWRGaWx0ZXJJZHggPiAtMSAmJiBPYmplY3Qua2V5cyhkYXRhc2V0cykubGVuZ3RoID4gMDtcblxuICAgIC8vIGlmIGZpbHRlciBpcyBub3QgYW5pbWF0aW5nLCBwYXNzIGluIGVubGFyZ2VkIGZpbHRlciBoZXJlIGJlY2F1c2VcbiAgICAvLyBhbmltYXRpb24gY29udHJvbGxlciBuZWVkcyB0byBjYWxsIHJlc2V0IG9uIGl0XG4gICAgY29uc3QgZmlsdGVyID0gYW5pbWF0ZWRGaWx0ZXIgfHwgZmlsdGVyc1tlbmxhcmdlZEZpbHRlcklkeF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJvdHRvbVdpZGdldENvbnRhaW5lclxuICAgICAgICB3aWR0aD17TWF0aC5taW4obWF4V2lkdGgsIGVubGFyZ2VkRmlsdGVyV2lkdGgpfVxuICAgICAgICBjbGFzc05hbWU9XCJib3R0b20td2lkZ2V0LS1jb250YWluZXJcIlxuICAgICAgICBoYXNQYWRkaW5nPXtzaG93QW5pbWF0aW9uQ29udHJvbCB8fCBzaG93VGltZVdpZGdldH1cbiAgICAgID5cbiAgICAgICAgPExheWVyQW5pbWF0aW9uQ29udHJvbGxlclxuICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZz17YW5pbWF0aW9uQ29uZmlnfVxuICAgICAgICAgIHNldExheWVyQW5pbWF0aW9uVGltZT17dmlzU3RhdGVBY3Rpb25zLnNldExheWVyQW5pbWF0aW9uVGltZX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoaXNBbmltYXRpbmcsIHN0YXJ0LCBwYXVzZSwgcmVzZXQpID0+XG4gICAgICAgICAgICBzaG93QW5pbWF0aW9uQ29udHJvbCA/IChcbiAgICAgICAgICAgICAgPEFuaW1hdGlvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWc9e2FuaW1hdGlvbkNvbmZpZ31cbiAgICAgICAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRMYXllckFuaW1hdGlvblRpbWV9XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVMYXllckFuaW1hdGlvblNwZWVkfVxuICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dmlzU3RhdGVBY3Rpb25zLnRvZ2dsZUxheWVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0YWJsZT17IWFuaW1hdGVkRmlsdGVyfVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0aW5nPXtpc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgPC9MYXllckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgIHtmaWx0ZXIgJiYgKFxuICAgICAgICAgIDxGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyXG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGZpbHRlcklkeD17YW5pbWF0ZWRGaWx0ZXJJZHggPiAtMSA/IGFuaW1hdGVkRmlsdGVySWR4IDogZW5sYXJnZWRGaWx0ZXJJZHh9XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lPXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyQW5pbWF0aW9uVGltZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7KGlzQW5pbWF0aW5nLCBzdGFydCwgcGF1c2UsIHJlc2V0QW5pbWF0aW9uKSA9PlxuICAgICAgICAgICAgICBzaG93VGltZVdpZGdldCA/IChcbiAgICAgICAgICAgICAgICA8VGltZVdpZGdldFxuICAgICAgICAgICAgICAgICAgLy8gVGltZVdpZGdldCB1c2VzIFJlYWN0Lm1lbW8sIGhlcmUgd2UgcGFzcyB3aWR0aFxuICAgICAgICAgICAgICAgICAgLy8gZXZlbiB0aG91Z2ggaXQgZG9lc250IHVzZSBpdCwgdG8gZm9yY2UgcmVyZW5kZXJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPXtlbmxhcmdlZEZpbHRlcldpZHRofVxuICAgICAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJzW2VubGFyZ2VkRmlsdGVySWR4XX1cbiAgICAgICAgICAgICAgICAgIGluZGV4PXtlbmxhcmdlZEZpbHRlcklkeH1cbiAgICAgICAgICAgICAgICAgIGlzQW55RmlsdGVyQW5pbWF0aW5nPXtCb29sZWFuKGFuaW1hdGVkRmlsdGVyKX1cbiAgICAgICAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtyZWFkT25seX1cbiAgICAgICAgICAgICAgICAgIHNob3dUaW1lRGlzcGxheT17c2hvd0Zsb2F0aW5nVGltZURpc3BsYXl9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJQbG90PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyUGxvdH1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlcj17dmlzU3RhdGVBY3Rpb25zLnNldEZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRGaWx0ZXJBbmltYXRpb25UaW1lfVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93fVxuICAgICAgICAgICAgICAgICAgdG9nZ2xlQW5pbWF0aW9uPXt2aXNTdGF0ZUFjdGlvbnMudG9nZ2xlRmlsdGVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVGaWx0ZXJBbmltYXRpb25TcGVlZH1cbiAgICAgICAgICAgICAgICAgIGVubGFyZ2VGaWx0ZXI9e3Zpc1N0YXRlQWN0aW9ucy5lbmxhcmdlRmlsdGVyfVxuICAgICAgICAgICAgICAgICAgcmVzZXRBbmltYXRpb249e3Jlc2V0QW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgaXNBbmltYXRhYmxlPXshYW5pbWF0aW9uQ29uZmlnIHx8ICFhbmltYXRpb25Db25maWcuaXNBbmltYXRpbmd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L0ZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgICl9XG4gICAgICA8L0JvdHRvbVdpZGdldENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIEJvdHRvbVdpZGdldC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbiAgcmV0dXJuIEJvdHRvbVdpZGdldDtcbn1cbi8qIGVzbGludC1lbmFibGUgY29tcGxleGl0eSAqL1xuIl19