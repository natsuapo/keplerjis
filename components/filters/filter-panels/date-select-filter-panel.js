"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _icons = require("../../common/icons");

var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));

var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));

var _dateSelectFilter = _interopRequireDefault(require("../date-select-filter"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

DateSelectFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _dateSelectFilter["default"], _sourceDataSelector["default"]];

function DateSelectFilterPanelFactory(FieldPanelWithFieldSelect, DateSelectFilter) {
  var TimeRangeFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        filter = _ref.filter,
        isAnyFilterAnimating = _ref.isAnyFilterAnimating,
        enlargeFilter = _ref.enlargeFilter,
        setFilter = _ref.setFilter,
        removeFilter = _ref.removeFilter,
        toggleAnimation = _ref.toggleAnimation,
        getFilter = _ref.getFilter;
    console.log('on set filter'); //这里看上去是多个filter了但是一次只能更新一个：理由：filter没变

    var onSetFilter = (0, _react.useCallback)(function (value) {
      // const total_val = {...getFilter(idx)?getFilter(idx):filter}
      var total_val = _objectSpread({}, filter.value);

      total_val.date = value;
      setFilter(idx, 'value', total_val);
      filter.value = total_val;
    }, [idx, setFilter]);
    var onSetDowFilter = (0, _react.useCallback)(function (value) {
      var total_val = _objectSpread({}, filter.value);

      total_val.dow = value;
      setFilter(idx, 'value', total_val);
      filter.value = total_val;
    }, [idx, setFilter]);
    var onSetHolidayFilter = (0, _react.useCallback)(function (value) {
      var total_val = _objectSpread({}, filter.value);

      total_val.holiday = value;
      return setFilter(idx, 'value', total_val);
    }, [idx, setFilter]);
    var panelActions = (0, _react.useMemo)(function () {
      return [{
        id: filter.id,
        onClick: enlargeFilter,
        tooltip: 'tooltip.timePlayback',
        iconComponent: _icons.Clock,
        active: filter.enlarged
      }];
    }, [filter.id, filter.enlarged, enlargeFilter]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter,
      panelActions: panelActions
    }, filter.type && !filter.enlarged && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(DateSelectFilter, {
      filter: filter,
      idx: idx,
      isAnyFilterAnimating: isAnyFilterAnimating,
      toggleAnimation: toggleAnimation,
      setFilter: onSetFilter,
      setDowFilter: onSetDowFilter,
      setHolidayFilter: onSetHolidayFilter
    }))));
  });

  TimeRangeFilterPanel.displayName = 'TimeRangeFilterPanel';
  return TimeRangeFilterPanel;
}

var _default = DateSelectFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,