"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("../../common/styled-components");

var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));

var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

// Copyright (c) 2022 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
NewFilterPanelFactory.deps = [_filterPanelHeader["default"], _sourceDataSelector["default"], _fieldSelector["default"]];

function NewFilterPanelFactory(FilterPanelHeader, SourceDataSelector, FieldSelector) {
  /** @type {import('./filter-panel-types').FilterPanelComponent} */
  var NewFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        filter = _ref.filter,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        setFilter = _ref.setFilter,
        removeFilter = _ref.removeFilter,
        enlargeFilter = _ref.enlargeFilter;
    var onFieldSelector = (0, _react.useCallback)(function (field) {
      return setFilter(idx, 'name', field.name);
    }, [idx, setFilter]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [datasets[filter.dataId[0]]],
      allAvailableFields: allAvailableFields,
      idx: idx,
      filter: filter,
      removeFilter: removeFilter,
      enlargeFilter: enlargeFilter,
      enlarged: filter.enlarged
    }, /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      inputTheme: "secondary",
      fields: allAvailableFields,
      value: Array.isArray(filter.name) ? filter.name[0] : filter.name,
      erasable: false,
      onSelect: onFieldSelector
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, Object.keys(datasets).length > 1 && /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      disabled: filter.freeze,
      dataId: filter.dataId,
      onSelect: onSourceDataSelector
    })));
  });

  NewFilterPanel.displayName = 'NewFilterPanel';
  return NewFilterPanel;
}

var _default = NewFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvZmlsdGVyLXBhbmVscy9uZXctZmlsdGVyLXBhbmVsLmpzIl0sIm5hbWVzIjpbIk5ld0ZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnkiLCJTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5IiwiRmllbGRTZWxlY3RvckZhY3RvcnkiLCJGaWx0ZXJQYW5lbEhlYWRlciIsIlNvdXJjZURhdGFTZWxlY3RvciIsIkZpZWxkU2VsZWN0b3IiLCJOZXdGaWx0ZXJQYW5lbCIsIlJlYWN0IiwibWVtbyIsImlkeCIsImZpbHRlciIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwiZW5sYXJnZUZpbHRlciIsIm9uRmllbGRTZWxlY3RvciIsImZpZWxkIiwibmFtZSIsIm9uU291cmNlRGF0YVNlbGVjdG9yIiwidmFsdWUiLCJkYXRhSWQiLCJlbmxhcmdlZCIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmcmVlemUiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUFBLHFCQUFxQixDQUFDQyxJQUF0QixHQUE2QixDQUMzQkMsNkJBRDJCLEVBRTNCQyw4QkFGMkIsRUFHM0JDLHlCQUgyQixDQUE3Qjs7QUFNQSxTQUFTSixxQkFBVCxDQUErQkssaUJBQS9CLEVBQWtEQyxrQkFBbEQsRUFBc0VDLGFBQXRFLEVBQXFGO0FBQ25GO0FBQ0EsTUFBTUMsY0FBYyxnQkFBR0Msa0JBQU1DLElBQU4sQ0FDckIsZ0JBQXlGO0FBQUEsUUFBdkZDLEdBQXVGLFFBQXZGQSxHQUF1RjtBQUFBLFFBQWxGQyxNQUFrRixRQUFsRkEsTUFBa0Y7QUFBQSxRQUExRUMsUUFBMEUsUUFBMUVBLFFBQTBFO0FBQUEsUUFBaEVDLGtCQUFnRSxRQUFoRUEsa0JBQWdFO0FBQUEsUUFBNUNDLFNBQTRDLFFBQTVDQSxTQUE0QztBQUFBLFFBQWpDQyxZQUFpQyxRQUFqQ0EsWUFBaUM7QUFBQSxRQUFuQkMsYUFBbUIsUUFBbkJBLGFBQW1CO0FBRXZGLFFBQU1DLGVBQWUsR0FBRyx3QkFBWSxVQUFBQyxLQUFLO0FBQUEsYUFBSUosU0FBUyxDQUFDSixHQUFELEVBQU0sTUFBTixFQUFjUSxLQUFLLENBQUNDLElBQXBCLENBQWI7QUFBQSxLQUFqQixFQUF5RCxDQUMvRVQsR0FEK0UsRUFFL0VJLFNBRitFLENBQXpELENBQXhCO0FBS0EsUUFBTU0sb0JBQW9CLEdBQUcsd0JBQVksVUFBQUMsS0FBSztBQUFBLGFBQUlQLFNBQVMsQ0FBQ0osR0FBRCxFQUFNLFFBQU4sRUFBZ0JXLEtBQWhCLENBQWI7QUFBQSxLQUFqQixFQUFzRCxDQUNqRlgsR0FEaUYsRUFFakZJLFNBRmlGLENBQXRELENBQTdCO0FBS0Esd0JBQ0UsK0VBQ0UsZ0NBQUMsaUJBQUQ7QUFDRSxNQUFBLFFBQVEsRUFBRSxDQUFDRixRQUFRLENBQUNELE1BQU0sQ0FBQ1csTUFBUCxDQUFjLENBQWQsQ0FBRCxDQUFULENBRFo7QUFFRSxNQUFBLGtCQUFrQixFQUFFVCxrQkFGdEI7QUFHRSxNQUFBLEdBQUcsRUFBRUgsR0FIUDtBQUlFLE1BQUEsTUFBTSxFQUFFQyxNQUpWO0FBS0UsTUFBQSxZQUFZLEVBQUVJLFlBTGhCO0FBTUUsTUFBQSxhQUFhLEVBQUVDLGFBTmpCO0FBT0UsTUFBQSxRQUFRLEVBQUVMLE1BQU0sQ0FBQ1k7QUFQbkIsb0JBU0UsZ0NBQUMsYUFBRDtBQUNFLE1BQUEsVUFBVSxFQUFDLFdBRGI7QUFFRSxNQUFBLE1BQU0sRUFBRVYsa0JBRlY7QUFHRSxNQUFBLEtBQUssRUFBRVcsS0FBSyxDQUFDQyxPQUFOLENBQWNkLE1BQU0sQ0FBQ1EsSUFBckIsSUFBNkJSLE1BQU0sQ0FBQ1EsSUFBUCxDQUFZLENBQVosQ0FBN0IsR0FBOENSLE1BQU0sQ0FBQ1EsSUFIOUQ7QUFJRSxNQUFBLFFBQVEsRUFBRSxLQUpaO0FBS0UsTUFBQSxRQUFRLEVBQUVGO0FBTFosTUFURixDQURGLGVBa0JFLGdDQUFDLHFDQUFEO0FBQXFCLE1BQUEsU0FBUyxFQUFDO0FBQS9CLE9BQ0dTLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZZixRQUFaLEVBQXNCZ0IsTUFBdEIsR0FBK0IsQ0FBL0IsaUJBQ0MsZ0NBQUMsa0JBQUQ7QUFDRSxNQUFBLFVBQVUsRUFBQyxXQURiO0FBRUUsTUFBQSxRQUFRLEVBQUVoQixRQUZaO0FBR0UsTUFBQSxRQUFRLEVBQUVELE1BQU0sQ0FBQ2tCLE1BSG5CO0FBSUUsTUFBQSxNQUFNLEVBQUVsQixNQUFNLENBQUNXLE1BSmpCO0FBS0UsTUFBQSxRQUFRLEVBQUVGO0FBTFosTUFGSixDQWxCRixDQURGO0FBZ0NELEdBN0NvQixDQUF2Qjs7QUFnREFiLEVBQUFBLGNBQWMsQ0FBQ3VCLFdBQWYsR0FBNkIsZ0JBQTdCO0FBRUEsU0FBT3ZCLGNBQVA7QUFDRDs7ZUFFY1IscUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtTdHlsZWRGaWx0ZXJDb250ZW50fSBmcm9tICdjb21wb25lbnRzL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgRmlsdGVyUGFuZWxIZWFkZXJGYWN0b3J5IGZyb20gJ2NvbXBvbmVudHMvc2lkZS1wYW5lbC9maWx0ZXItcGFuZWwvZmlsdGVyLXBhbmVsLWhlYWRlcic7XG5pbXBvcnQgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSBmcm9tICdjb21wb25lbnRzL3NpZGUtcGFuZWwvY29tbW9uL3NvdXJjZS1kYXRhLXNlbGVjdG9yJztcbmltcG9ydCBGaWVsZFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi8uLi9jb21tb24vZmllbGQtc2VsZWN0b3InO1xuXG5OZXdGaWx0ZXJQYW5lbEZhY3RvcnkuZGVwcyA9IFtcbiAgRmlsdGVyUGFuZWxIZWFkZXJGYWN0b3J5LFxuICBTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5LFxuICBGaWVsZFNlbGVjdG9yRmFjdG9yeVxuXTtcblxuZnVuY3Rpb24gTmV3RmlsdGVyUGFuZWxGYWN0b3J5KEZpbHRlclBhbmVsSGVhZGVyLCBTb3VyY2VEYXRhU2VsZWN0b3IsIEZpZWxkU2VsZWN0b3IpIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vZmlsdGVyLXBhbmVsLXR5cGVzJykuRmlsdGVyUGFuZWxDb21wb25lbnR9ICovXG4gIGNvbnN0IE5ld0ZpbHRlclBhbmVsID0gUmVhY3QubWVtbyhcbiAgICAoe2lkeCwgZmlsdGVyLCBkYXRhc2V0cywgYWxsQXZhaWxhYmxlRmllbGRzLCBzZXRGaWx0ZXIsIHJlbW92ZUZpbHRlciwgZW5sYXJnZUZpbHRlcn0pID0+IHtcblxuICAgICAgY29uc3Qgb25GaWVsZFNlbGVjdG9yID0gdXNlQ2FsbGJhY2soZmllbGQgPT4gc2V0RmlsdGVyKGlkeCwgJ25hbWUnLCBmaWVsZC5uYW1lKSwgW1xuICAgICAgICBpZHgsXG4gICAgICAgIHNldEZpbHRlclxuICAgICAgXSk7XG5cbiAgICAgIGNvbnN0IG9uU291cmNlRGF0YVNlbGVjdG9yID0gdXNlQ2FsbGJhY2sodmFsdWUgPT4gc2V0RmlsdGVyKGlkeCwgJ2RhdGFJZCcsIHZhbHVlKSwgW1xuICAgICAgICBpZHgsXG4gICAgICAgIHNldEZpbHRlclxuICAgICAgXSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEZpbHRlclBhbmVsSGVhZGVyXG4gICAgICAgICAgICBkYXRhc2V0cz17W2RhdGFzZXRzW2ZpbHRlci5kYXRhSWRbMF1dXX1cbiAgICAgICAgICAgIGFsbEF2YWlsYWJsZUZpZWxkcz17YWxsQXZhaWxhYmxlRmllbGRzfVxuICAgICAgICAgICAgaWR4PXtpZHh9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIHJlbW92ZUZpbHRlcj17cmVtb3ZlRmlsdGVyfVxuICAgICAgICAgICAgZW5sYXJnZUZpbHRlcj17ZW5sYXJnZUZpbHRlcn1cbiAgICAgICAgICAgIGVubGFyZ2VkPXtmaWx0ZXIuZW5sYXJnZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZpZWxkU2VsZWN0b3JcbiAgICAgICAgICAgICAgaW5wdXRUaGVtZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgIGZpZWxkcz17YWxsQXZhaWxhYmxlRmllbGRzfVxuICAgICAgICAgICAgICB2YWx1ZT17QXJyYXkuaXNBcnJheShmaWx0ZXIubmFtZSkgPyBmaWx0ZXIubmFtZVswXSA6IGZpbHRlci5uYW1lfVxuICAgICAgICAgICAgICBlcmFzYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgIG9uU2VsZWN0PXtvbkZpZWxkU2VsZWN0b3J9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRmlsdGVyUGFuZWxIZWFkZXI+XG4gICAgICAgICAgPFN0eWxlZEZpbHRlckNvbnRlbnQgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19jb250ZW50XCI+XG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoZGF0YXNldHMpLmxlbmd0aCA+IDEgJiYgKFxuICAgICAgICAgICAgICA8U291cmNlRGF0YVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgaW5wdXRUaGVtZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtmaWx0ZXIuZnJlZXplfVxuICAgICAgICAgICAgICAgIGRhdGFJZD17ZmlsdGVyLmRhdGFJZH1cbiAgICAgICAgICAgICAgICBvblNlbGVjdD17b25Tb3VyY2VEYXRhU2VsZWN0b3J9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvU3R5bGVkRmlsdGVyQ29udGVudD5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICBOZXdGaWx0ZXJQYW5lbC5kaXNwbGF5TmFtZSA9ICdOZXdGaWx0ZXJQYW5lbCc7XG5cbiAgcmV0dXJuIE5ld0ZpbHRlclBhbmVsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdGaWx0ZXJQYW5lbEZhY3Rvcnk7XG4iXX0=