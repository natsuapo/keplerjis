"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FloatingTimeDisplayFactory;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _icons = require("../icons");

var _defaultSettings = require("../../../constants/default-settings");

var _styledComponents2 = require("../styled-components");

var _dataUtils = require("../../../utils/data-utils");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;

var StyledTimeDisplayWrapper = _styledComponents["default"].div.attrs({
  className: 'floating-time-display'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  bottom: ", ";\n  display: flex;\n  position: absolute;\n  width: 100%;\n  margin-left: -", "px;\n  justify-content: center;\n"])), function (props) {
  return "calc(100% + ".concat(props.theme.bottomPanelGap, "px)");
}, function (props) {
  return props.theme.bottomInnerPdSide;
});

var StyledTimeDisplay = _styledComponents["default"].div.attrs({
  className: 'floating-time-display__inner'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  border-radius: ", "px;\n  color: ", ";\n  display: flex;\n  height: ", "px;\n  justify-content: center;\n  min-width: ", "px;\n  opacity: ", ";\n  padding: ", ";\n"])), function (props) {
  return props.theme.panelBackground;
}, function (props) {
  return props.theme.timeDisplayBorderRadius;
}, function (props) {
  return props.theme.titleTextColor;
}, function (props) {
  return props.theme.timeDisplayHeight;
}, function (props) {
  return props.theme.timeDisplayMinWidth;
}, function (props) {
  return props.theme.timeDisplayOpacity;
}, function (props) {
  return props.theme.timeDisplayPadding;
});

var StyledTimeDisplayGroups = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n"])));

var StyledTimeDisplayRows = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n"])));

var StyledTimeDisplayTop = _styledComponents["default"].div.attrs({
  className: 'animation-control__time-display__top'
})(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  font-size: 12px;\n  font-weight: 500;\n  justify-content: center;\n"])), function (props) {
  return props.theme.textColor;
});

var StyledTimeDisplayBottom = _styledComponents["default"].div.attrs({
  className: 'animation-control__time-display__bottom'
})(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  font-size: 14px;\n  font-weight: 500;\n  justify-content: center;\n"])), function (props) {
  return props.theme.titleTextColor;
});

var StyledTimeValueGroup = _styledComponents["default"].div.attrs({
  className: 'animation-control__time-value-group'
})(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n"])));

var StyledHorizontalBar = _styledComponents["default"].div.attrs({
  className: 'animation-control__horizontal-bar'
})(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  margin: 0 12px;\n"])));

var TimeDivider = function TimeDivider() {
  return /*#__PURE__*/_react["default"].createElement(StyledHorizontalBar, null, /*#__PURE__*/_react["default"].createElement(_icons.Minus, {
    height: "12px"
  }));
};

var TimeDisplayRow = function TimeDisplayRow(_ref) {
  var _ref$timeValues = _ref.timeValues,
      timeValues = _ref$timeValues === void 0 ? [] : _ref$timeValues;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.CenterFlexbox, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "time-value"
  }, timeValues[0]), timeValues[1] ? /*#__PURE__*/_react["default"].createElement(TimeDivider, null) : null, timeValues[1] ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "time-value"
  }, timeValues[1]) : null);
};

function FloatingTimeDisplayFactory() {
  var FloatingTimeDisplay = function FloatingTimeDisplay(_ref2) {
    var currentTime = _ref2.currentTime,
        defaultTimeFormat = _ref2.defaultTimeFormat,
        timeFormat = _ref2.timeFormat,
        timezone = _ref2.timezone;

    var _useMemo = (0, _react.useMemo)(function () {
      var groupTime = Array.isArray(currentTime) ? currentTime : [currentTime];
      var hasUserFormat = typeof timeFormat === 'string';
      var currentFormat = (hasUserFormat ? timeFormat : defaultTimeFormat) || _defaultSettings.DEFAULT_TIME_FORMAT;
      var dateFunc = (0, _dataUtils.datetimeFormatter)(timezone);

      if (hasUserFormat) {
        // dont split time if user defined it
        return {
          displayDate: groupTime.map(dateFunc(currentFormat)),
          displayTime: []
        };
      }

      return groupTime.reduce(function (accu, curr) {
        var _currentFormat$split = currentFormat.split(' '),
            _currentFormat$split2 = (0, _slicedToArray2["default"])(_currentFormat$split, 2),
            dateFormat = _currentFormat$split2[0],
            datetimeFormat = _currentFormat$split2[1];

        var dateString = dateFunc(dateFormat)(curr);
        var timeString = datetimeFormat ? dateFunc(datetimeFormat)(curr) : null;

        if (!accu.displayDate.includes(dateString)) {
          accu.displayDate.push(dateString);
        }

        if (timeString) {
          accu.displayTime.push(timeString);
        }

        return accu;
      }, {
        displayDate: [],
        displayTime: []
      });
    }, [currentTime, timeFormat, defaultTimeFormat, timezone]),
        displayDate = _useMemo.displayDate,
        displayTime = _useMemo.displayTime;

    var twoGroups = displayDate.length === 2 && displayTime.length === 2;
    var bottomRow = displayTime.length ? displayTime : displayDate.length ? displayDate : null;
    var topRow = displayDate.length && displayTime.length ? displayDate : null;
    return /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayWrapper, null, /*#__PURE__*/_react["default"].createElement(StyledTimeDisplay, {
      className: "animation-control__time-display"
    }, twoGroups ? /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayGroups, null, /*#__PURE__*/_react["default"].createElement(StyledTimeValueGroup, null, /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayTop, null, displayDate[0]), /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayBottom, null, displayTime[0])), /*#__PURE__*/_react["default"].createElement(TimeDivider, null), /*#__PURE__*/_react["default"].createElement(StyledTimeValueGroup, null, /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayTop, null, displayDate[1]), /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayBottom, null, displayTime[1]))) : /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayRows, null, topRow ? /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayTop, null, /*#__PURE__*/_react["default"].createElement(TimeDisplayRow, {
      timeValues: topRow
    })) : null, bottomRow ? /*#__PURE__*/_react["default"].createElement(StyledTimeDisplayBottom, null, /*#__PURE__*/_react["default"].createElement(TimeDisplayRow, {
      timeValues: bottomRow
    })) : null)));
  };

  return FloatingTimeDisplay;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,