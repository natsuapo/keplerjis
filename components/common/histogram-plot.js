"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _d3Scale = require("d3-scale");

var _d3Array = require("d3-array");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _templateObject;

var histogramStyle = {
  highlightW: 0.7,
  unHighlightedW: 0.4
};

var HistogramWrapper = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  overflow: visible;\n  .histogram-bars {\n    rect {\n      fill: ", ";\n    }\n    rect.in-range {\n      fill: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.histogramFillOutRange;
}, function (props) {
  return props.theme.histogramFillInRange;
});

function HistogramPlotFactory() {
  var HistogramPlot = function HistogramPlot(_ref) {
    var width = _ref.width,
        height = _ref.height,
        margin = _ref.margin,
        isRanged = _ref.isRanged,
        histogram = _ref.histogram,
        value = _ref.value,
        brushComponent = _ref.brushComponent;
    var domain = (0, _react.useMemo)(function () {
      return [histogram[0].x0, histogram[histogram.length - 1].x1];
    }, [histogram]);
    var dataId = Object.keys(histogram[0]).filter(function (k) {
      return k !== 'x0' && k !== 'x1';
    })[0]; // use 1st for now

    var getValue = (0, _react.useMemo)(function () {
      return function (d) {
        return d[dataId];
      };
    }, [dataId]);
    var x = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain(domain).range([0, width]);
    }, [domain, width]);
    var y = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain([0, Number((0, _d3Array.max)(histogram, getValue))]).range([0, height]);
    }, [histogram, height, getValue]);
    var barWidth = width / histogram.length;
    return /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
      width: width,
      height: height,
      style: {
        marginTop: "".concat(margin.top, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement("g", {
      className: "histogram-bars"
    }, histogram.map(function (bar) {
      var inRange = bar.x1 <= value[1] && bar.x0 >= value[0];
      var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
      return /*#__PURE__*/_react["default"].createElement("rect", {
        className: (0, _classnames["default"])({
          'in-range': inRange
        }),
        key: bar.x0,
        height: y(getValue(bar)),
        width: barWidth * wRatio,
        x: x(bar.x0) + barWidth * (1 - wRatio) / 2,
        rx: 1,
        ry: 1,
        y: height - y(getValue(bar))
      });
    })), /*#__PURE__*/_react["default"].createElement("g", {
      transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
    }, brushComponent));
  };

  var EmpptyOrPlot = function EmpptyOrPlot(props) {
    return !props.histogram || !props.histogram.length ? null : /*#__PURE__*/_react["default"].createElement(HistogramPlot, props);
  };

  return EmpptyOrPlot;
}

var _default = HistogramPlotFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,