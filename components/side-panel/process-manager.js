"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledMessageText = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _localization = require("../../localization");

var _styledComponents = require("../common/styled-components");

var _processPanel = _interopRequireDefault(require("./process-panel/process-panel"));

var _sourceDataCatalog = _interopRequireDefault(require("./common/source-data-catalog"));

var _filterUtils = require("../../utils/filter-utils");

var _lodash = _interopRequireDefault(require("lodash.get"));

var _loadingSpinner = _interopRequireDefault(require("../common/loading-spinner"));

var _styledComponents2 = _interopRequireDefault(require("styled-components"));

var _lodash2 = _interopRequireDefault(require("lodash"));

var _processorUtils = require("../../utils/processor-utils");

var _templateObject;

// import SourceDataSelectorFactory from './common/source-data-selector';
ProcessManagerFactory.deps = [_sourceDataCatalog["default"], _processPanel["default"]];

var StyledMessageText = _styledComponents2["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 12px;\n  color:", ";\n"])), function (props) {
  return props.flag ? 'green' : 'red';
});

exports.StyledMessageText = StyledMessageText;

function ProcessManagerFactory(SourceDataCatalog, ProcessPanel) {
  var ProcessManager = function ProcessManager(_ref) {
    var processor = _ref.processor,
        datasets = _ref.datasets,
        layers = _ref.layers,
        showDatasetTable = _ref.showDatasetTable,
        visStateActions = _ref.visStateActions;
    var setProcessor = visStateActions.setProcessor,
        runProcessor = visStateActions.runProcessor,
        removeProcessor = visStateActions.removeProcessor,
        activateProcessor = visStateActions.activateProcessor;

    var fieldsSelector = function fieldsSelector() {
      var pairs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      console.log('set field selector');
      var datasetId = processor && processor.dataId ? processor.dataId[0] : undefined;

      if (!datasetId) {
        return [];
      }

      if (!pairs) {
        return (0, _lodash["default"])(datasets, [datasetId, 'fields'], []);
      } else {
        var dataset_data = (0, _lodash["default"])(datasets, [datasetId, 'fields'], []);
        var point_layer = datasets[datasetId].fieldPairs ? datasets[datasetId].fieldPairs.map(function (fp) {
          return {
            name: fp.defaultName === '' ? Object.keys(fp.pair).join('_') : fp.defaultName,
            type: 'point',
            format: 'pair',
            id: 'temp_' + Object.keys(fp.pair).join('_'),
            fieldIdx: Object.keys(fp.pair).map(function (x) {
              return fp.pair[x].fieldIdx;
            }),
            displayName: fp.defaultName === '' ? Object.keys(fp.pair).join('_') : fp.defaultName,
            analyzerType: "POINT",
            pair: Object.keys(fp.pair)
          };
        }) : null; // return {suggested:point_layer,columns:dataset_data}

        return Array.isArray(point_layer) ? dataset_data.concat(point_layer) : dataset_data;
      }
    };

    var runProcessorWithVis = function runProcessorWithVis(prop) {
      if (processor) {
        console.log('run processor');
        return runProcessor(prop, visStateActions);
      }
    };

    var exist_processor = processor ? processor : _lodash2["default"].cloneDeep(_processorUtils.DEFAULT_PROCESSOR_STRUCTURE);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "process-manager"
    }, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasets,
      showDatasetTable: showDatasetTable
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelDivider, null), /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(ProcessPanel, {
      processor: exist_processor,
      setProcessor: setProcessor,
      datasets: datasets,
      allAvailableFields: fieldsSelector
    })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents.Button, {
      className: "add-processor-button" // inactive={hadEmptyProcessor || !hadDataset}
      ,
      width: "105px",
      onClick: runProcessorWithVis
    }, processor && processor.flag ? /*#__PURE__*/_react["default"].createElement(_loadingSpinner["default"], {
      size: 12
    }) : /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "Process"
    })), processor && /*#__PURE__*/_react["default"].createElement(StyledMessageText, {
      flag: processor.preprocessor ? processor.preprocessor.preflag : false
    }, processor.preprocessor ? processor.preprocessor.preflag ? 'sucess' : 'failed' : 'no result')));
  };

  return ProcessManager;
}

var _default = ProcessManagerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,