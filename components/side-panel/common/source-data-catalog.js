"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../../common/styled-components");

var _datasetTitle = _interopRequireDefault(require("./dataset-title"));

var _datasetInfo = _interopRequireDefault(require("./dataset-info"));

var _templateObject;

var SourceDataCatalogWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  transition: ", ";\n"])), function (props) {
  return props.theme.transition;
});

SourceDataCatalogFactory.deps = [_datasetTitle["default"], _datasetInfo["default"]];

function SourceDataCatalogFactory(DatasetTitle, DatasetInfo) {
  var SourceDataCatalog = function SourceDataCatalog(_ref) {
    var datasets = _ref.datasets,
        showDatasetTable = _ref.showDatasetTable,
        removeDataset = _ref.removeDataset,
        onTitleClick = _ref.onTitleClick,
        _ref$showDeleteDatase = _ref.showDeleteDataset,
        showDeleteDataset = _ref$showDeleteDatase === void 0 ? false : _ref$showDeleteDatase;
    return /*#__PURE__*/_react["default"].createElement(SourceDataCatalogWrapper, {
      className: "source-data-catalog"
    }, Object.values(datasets).map(function (dataset, index) {
      return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
        key: dataset.id
      }, /*#__PURE__*/_react["default"].createElement(DatasetTitle, {
        showDatasetTable: showDatasetTable,
        showDeleteDataset: showDeleteDataset,
        removeDataset: removeDataset,
        dataset: dataset,
        onTitleClick: onTitleClick
      }), showDatasetTable ? /*#__PURE__*/_react["default"].createElement(DatasetInfo, {
        dataset: dataset
      }) : null);
    }));
  };

  return SourceDataCatalog;
}

var _default = SourceDataCatalogFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NpZGUtcGFuZWwvY29tbW9uL3NvdXJjZS1kYXRhLWNhdGFsb2cuanMiXSwibmFtZXMiOlsiU291cmNlRGF0YUNhdGFsb2dXcmFwcGVyIiwic3R5bGVkIiwiZGl2IiwicHJvcHMiLCJ0aGVtZSIsInRyYW5zaXRpb24iLCJTb3VyY2VEYXRhQ2F0YWxvZ0ZhY3RvcnkiLCJkZXBzIiwiRGF0YXNldFRpdGxlRmFjdG9yeSIsIkRhdGFzZXRJbmZvRmFjdG9yeSIsIkRhdGFzZXRUaXRsZSIsIkRhdGFzZXRJbmZvIiwiU291cmNlRGF0YUNhdGFsb2ciLCJkYXRhc2V0cyIsInNob3dEYXRhc2V0VGFibGUiLCJyZW1vdmVEYXRhc2V0Iiwib25UaXRsZUNsaWNrIiwic2hvd0RlbGV0ZURhdGFzZXQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJtYXAiLCJkYXRhc2V0IiwiaW5kZXgiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSx3QkFBd0IsR0FBR0MsNkJBQU9DLEdBQVYsOEdBQ2QsVUFBQUMsS0FBSztBQUFBLFNBQUlBLEtBQUssQ0FBQ0MsS0FBTixDQUFZQyxVQUFoQjtBQUFBLENBRFMsQ0FBOUI7O0FBSUFDLHdCQUF3QixDQUFDQyxJQUF6QixHQUFnQyxDQUFDQyx3QkFBRCxFQUFzQkMsdUJBQXRCLENBQWhDOztBQUVBLFNBQVNILHdCQUFULENBQWtDSSxZQUFsQyxFQUFnREMsV0FBaEQsRUFBNkQ7QUFDM0QsTUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQjtBQUFBLFFBQ3hCQyxRQUR3QixRQUN4QkEsUUFEd0I7QUFBQSxRQUV4QkMsZ0JBRndCLFFBRXhCQSxnQkFGd0I7QUFBQSxRQUd4QkMsYUFId0IsUUFHeEJBLGFBSHdCO0FBQUEsUUFJeEJDLFlBSndCLFFBSXhCQSxZQUp3QjtBQUFBLHFDQUt4QkMsaUJBTHdCO0FBQUEsUUFLeEJBLGlCQUx3QixzQ0FLSixLQUxJO0FBQUEsd0JBT3hCLGdDQUFDLHdCQUFEO0FBQTBCLE1BQUEsU0FBUyxFQUFDO0FBQXBDLE9BQ0dDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTixRQUFkLEVBQXdCTyxHQUF4QixDQUE0QixVQUFDQyxPQUFELEVBQVVDLEtBQVY7QUFBQSwwQkFDM0IsZ0NBQUMsbUNBQUQ7QUFBa0IsUUFBQSxHQUFHLEVBQUVELE9BQU8sQ0FBQ0U7QUFBL0Isc0JBQ0UsZ0NBQUMsWUFBRDtBQUNFLFFBQUEsZ0JBQWdCLEVBQUVULGdCQURwQjtBQUVFLFFBQUEsaUJBQWlCLEVBQUVHLGlCQUZyQjtBQUdFLFFBQUEsYUFBYSxFQUFFRixhQUhqQjtBQUlFLFFBQUEsT0FBTyxFQUFFTSxPQUpYO0FBS0UsUUFBQSxZQUFZLEVBQUVMO0FBTGhCLFFBREYsRUFRR0YsZ0JBQWdCLGdCQUFHLGdDQUFDLFdBQUQ7QUFBYSxRQUFBLE9BQU8sRUFBRU87QUFBdEIsUUFBSCxHQUF1QyxJQVIxRCxDQUQyQjtBQUFBLEtBQTVCLENBREgsQ0FQd0I7QUFBQSxHQUExQjs7QUF1QkEsU0FBT1QsaUJBQVA7QUFDRDs7ZUFFY04sd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjIgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7U2lkZVBhbmVsU2VjdGlvbn0gZnJvbSAnY29tcG9uZW50cy9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IERhdGFzZXRUaXRsZUZhY3RvcnkgZnJvbSAnY29tcG9uZW50cy9zaWRlLXBhbmVsL2NvbW1vbi9kYXRhc2V0LXRpdGxlJztcbmltcG9ydCBEYXRhc2V0SW5mb0ZhY3RvcnkgZnJvbSAnY29tcG9uZW50cy9zaWRlLXBhbmVsL2NvbW1vbi9kYXRhc2V0LWluZm8nO1xuXG5jb25zdCBTb3VyY2VEYXRhQ2F0YWxvZ1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICB0cmFuc2l0aW9uOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnRyYW5zaXRpb259O1xuYDtcblxuU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5LmRlcHMgPSBbRGF0YXNldFRpdGxlRmFjdG9yeSwgRGF0YXNldEluZm9GYWN0b3J5XTtcblxuZnVuY3Rpb24gU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5KERhdGFzZXRUaXRsZSwgRGF0YXNldEluZm8pIHtcbiAgY29uc3QgU291cmNlRGF0YUNhdGFsb2cgPSAoe1xuICAgIGRhdGFzZXRzLFxuICAgIHNob3dEYXRhc2V0VGFibGUsXG4gICAgcmVtb3ZlRGF0YXNldCxcbiAgICBvblRpdGxlQ2xpY2ssXG4gICAgc2hvd0RlbGV0ZURhdGFzZXQgPSBmYWxzZVxuICB9KSA9PiAoXG4gICAgPFNvdXJjZURhdGFDYXRhbG9nV3JhcHBlciBjbGFzc05hbWU9XCJzb3VyY2UtZGF0YS1jYXRhbG9nXCI+XG4gICAgICB7T2JqZWN0LnZhbHVlcyhkYXRhc2V0cykubWFwKChkYXRhc2V0LCBpbmRleCkgPT4gKFxuICAgICAgICA8U2lkZVBhbmVsU2VjdGlvbiBrZXk9e2RhdGFzZXQuaWR9PlxuICAgICAgICAgIDxEYXRhc2V0VGl0bGVcbiAgICAgICAgICAgIHNob3dEYXRhc2V0VGFibGU9e3Nob3dEYXRhc2V0VGFibGV9XG4gICAgICAgICAgICBzaG93RGVsZXRlRGF0YXNldD17c2hvd0RlbGV0ZURhdGFzZXR9XG4gICAgICAgICAgICByZW1vdmVEYXRhc2V0PXtyZW1vdmVEYXRhc2V0fVxuICAgICAgICAgICAgZGF0YXNldD17ZGF0YXNldH1cbiAgICAgICAgICAgIG9uVGl0bGVDbGljaz17b25UaXRsZUNsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge3Nob3dEYXRhc2V0VGFibGUgPyA8RGF0YXNldEluZm8gZGF0YXNldD17ZGF0YXNldH0gLz4gOiBudWxsfVxuICAgICAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG4gICAgICApKX1cbiAgICA8L1NvdXJjZURhdGFDYXRhbG9nV3JhcHBlcj5cbiAgKTtcblxuICByZXR1cm4gU291cmNlRGF0YUNhdGFsb2c7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvdXJjZURhdGFDYXRhbG9nRmFjdG9yeTtcbiJdfQ==