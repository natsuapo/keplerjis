"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _localization = require("../../../localization");

var _styledComponents2 = require("../../common/styled-components");

var _columnSelector = _interopRequireDefault(require("./column-selector"));

var _templateObject;

var TopRow = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n"])));

LayerColumnConfigFactory.deps = [_columnSelector["default"]];

function LayerColumnConfigFactory(ColumnSelector) {
  var LayerColumnConfig = function LayerColumnConfig(_ref) {
    var columnPairs = _ref.columnPairs,
        fieldPairs = _ref.fieldPairs,
        columns = _ref.columns,
        columnLabels = _ref.columnLabels,
        fields = _ref.fields,
        updateLayerConfig = _ref.updateLayerConfig,
        assignColumn = _ref.assignColumn,
        assignColumnPairs = _ref.assignColumnPairs;
    var enhancedFieldPairs = (0, _react.useMemo)(function () {
      return columnPairs && fieldPairs ? fieldPairs.map(function (fp) {
        return {
          name: fp.defaultName,
          type: 'point',
          pair: fp.pair
        };
      }) : null;
    }, [columnPairs, fieldPairs]);
    var onUpdateColumn = (0, _react.useCallback)(function (key, value) {
      var assignedColumns = value && value.pair && columnPairs ? assignColumnPairs(key, value.pair) : assignColumn(key, value);
      updateLayerConfig({
        columns: assignedColumns
      });
    }, [updateLayerConfig, columnPairs, assignColumnPairs, assignColumn]);
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-config__column"
    }, /*#__PURE__*/_react["default"].createElement(TopRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'columns.title'
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "layer.required"
    }))), Object.keys(columns).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(ColumnSelector, {
        column: columns[key],
        columns: columns,
        label: columnLabels && columnLabels[key] || key,
        key: key,
        allFields: fields,
        fieldPairs: enhancedFieldPairs,
        onSelect: function onSelect(val) {
          return onUpdateColumn(key, val);
        }
      });
    }))));
  };

  LayerColumnConfig.propTypes = {
    columns: _propTypes["default"].object.isRequired,
    fields: _propTypes["default"].arrayOf(_propTypes["default"].any).isRequired,
    assignColumnPairs: _propTypes["default"].func.isRequired,
    assignColumn: _propTypes["default"].func.isRequired,
    updateLayerConfig: _propTypes["default"].func.isRequired,
    columnPairs: _propTypes["default"].object,
    fieldPairs: _propTypes["default"].arrayOf(_propTypes["default"].any),
    columnLabels: _propTypes["default"].object
  };
  return LayerColumnConfig;
}

var _default = LayerColumnConfigFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,